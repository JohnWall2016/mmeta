package jmeta;
// generated by jmeta on Thu Aug 26 12:32:51 PDT 2010
// do not modify, instead edit original .jmeta file
import jmeta.*;


import java.util.*;


public class JMetaParser extends BaseParser {  public static void main(String[] args) {
        boolean embed = false;
        if (args.length < 1) {
            System.out.println("JMetaParser <input> [--embed]");
            System.exit(2);
        }
        if (args.length > 1 && args[1].equals("--embed")) {
            embed = true;
        }
        try {
            String input = Utils.readFile(args[0]+".jmeta");
            JMetaCompiler compiler = new JMetaCompiler(); compiler.embedded = embed;
            JMetaParser parser = new JMetaParser();
            //parser.tracing = true;
            String output = (String) compiler.parse(parser.parse(input));
            Utils.writeFile(args[0]+".java", output);
            System.exit(0);
        } catch (SyntaxError ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.exit(1);
    }
  public Object oneOf() {
      String chars = (String)_pop();
      return _char(chars);
    }

  public Object fromTo() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"fromTo"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null; Object y=null;    do {
    { int _p2=_pos; _t=ERROR; do { //and
    _t=_any();
    x=_t;
    if (_t==ERROR) break;
    _t=_any();
    y=_t;
    if (_t==ERROR) break;
    _push(x); _t=str();
    if (_t==ERROR) break;
    java.util.ArrayList<Object> as1=new java.util.ArrayList<Object>();
    while (true) { //many
    { int _p0=_pos; _t=ERROR; do { //and
                _push(y); _t=str();
        if (_t==ERROR) { _t=true; } else { _t=ERROR; }
        if (_t==ERROR) break;
        _t=_any();
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p0; }
    if (_t==ERROR) break; else as1.add(_t);
    } _t=as1;
    if (_t==ERROR) break;
    _push(y); _t=str();
    if (_t==ERROR) break;
  } while(false); if (_t==ERROR) _pos=_p2; }
    _t=_memoize("JMetaParser"+"."+"fromTo", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="fromTo"; return _t;
  }
  public Object sp() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"sp"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=ERROR; do{ //or
    _t=super.sp();
    if (_t!=ERROR) break;

    _push("//", "\n"); _t=fromTo();
    if (_t!=ERROR) break;

    _push("/*", "*/"); _t=fromTo();
    if (_t!=ERROR) break;

    _push("#", "\n"); _t=fromTo();
    if (_t!=ERROR) break;
  } while(false);
    _t=_memoize("JMetaParser"+"."+"sp", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="sp"; return _t;
  }
  public Object ws() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"ws"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    java.util.ArrayList<Object> as3=new java.util.ArrayList<Object>();
  while (true) { //many
  _t=ERROR; do{ //or
      _t=sp();
      if (_t!=ERROR) break;

      _t=nl();
      if (_t!=ERROR) break;
    } while(false);
  if (_t==ERROR) break; else as3.add(_t);
  } _t=as3;
    _t=_memoize("JMetaParser"+"."+"ws", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="ws"; return _t;
  }
  public Object listOf() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"listOf"); if (_t!=NOT_MEMOIZED) return _t;
    Object e=null; Object s=null; Object f=null; Object rs=null;    do {
    { int _p8=_pos; _t=ERROR; do { //and
    _t=_any();
    e=_t;
    if (_t==ERROR) break;
    _t=_any();
    s=_t;
    if (_t==ERROR) break;
    _t=ERROR; do{ //or
      { int _p6=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _push(e); _t=apply();
        f=_t;
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as5=new java.util.ArrayList<Object>();
        while (true) { //many
        { int _p4=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push(s); _t=str();
            if (_t==ERROR) break;
            _t=ws();
            if (_t==ERROR) break;
            _push(e); _t=apply();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p4; }
        if (_t==ERROR) break; else as5.add(_t);
        } _t=as5;
        rs=_t;
        if (_t==ERROR) break;
        _t=concat(new Object[] {f},rs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p6; }
      if (_t!=ERROR) break;

      { int _p7=_pos; _t=ERROR; do { //and
        _t=empty();
        if (_t==ERROR) break;
        _t=new Object[] {};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p7; }
      if (_t!=ERROR) break;
    } while(false);
    if (_t==ERROR) break;
  } while(false); if (_t==ERROR) _pos=_p8; }
    _t=_memoize("JMetaParser"+"."+"listOf", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="listOf"; return _t;
  }
  public Object nameFirst() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"nameFirst"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=ERROR; do{ //or
    _t=_str("_");
    if (_t!=ERROR) break;

    _t=letter();
    if (_t!=ERROR) break;
  } while(false);
    _t=_memoize("JMetaParser"+"."+"nameFirst", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="nameFirst"; return _t;
  }
  public Object nameRest() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"nameRest"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=ERROR; do{ //or
    _t=nameFirst();
    if (_t!=ERROR) break;

    _t=digit();
    if (_t!=ERROR) break;
  } while(false);
    _t=_memoize("JMetaParser"+"."+"nameRest", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="nameRest"; return _t;
  }
  public Object name() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"name"); if (_t!=NOT_MEMOIZED) return _t;
    Object f=null; Object rs=null;    do {
    { int _p11=_pos; _t=ERROR; do { //and
    _t=nameFirst();
    f=_t;
    if (_t==ERROR) break;
    java.util.ArrayList<Object> as9=new java.util.ArrayList<Object>();
    while (true) { //many
    _t=nameRest();
    if (_t==ERROR) break; else as9.add(_t);
    } _t=as9;
    rs=_t;
    if (_t==ERROR) break;
    _t=__act10(f,rs);
    if (_t==ERROR) break;
  } while(false); if (_t==ERROR) _pos=_p11; }
    _t=_memoize("JMetaParser"+"."+"name", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="name"; return _t;
  }
  public Object rulename() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"rulename"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    { int _p12=_pos; _t=ERROR; do { //and
        _push("def"); _t=k();
    if (_t==ERROR) { _t=true; } else { _t=ERROR; }
    if (_t==ERROR) break;
    _t=name();
    if (_t==ERROR) break;
  } while(false); if (_t==ERROR) _pos=_p12; }
    _t=_memoize("JMetaParser"+"."+"rulename", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="rulename"; return _t;
  }
  public Object varname() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"varname"); if (_t!=NOT_MEMOIZED) return _t;
    Object p=null; Object n=null;    do {
    { int _p14=_pos; _t=ERROR; do { //and
    _t=ERROR; do{ //or
      _t=_str("@");
      if (_t!=ERROR) break;

      _t="";
      if (_t!=ERROR) break;
    } while(false);
    p=_t;
    if (_t==ERROR) break;
    _t=name();
    n=_t;
    if (_t==ERROR) break;
    _t=__act13(p,n);
    if (_t==ERROR) break;
  } while(false); if (_t==ERROR) _pos=_p14; }
    _t=_memoize("JMetaParser"+"."+"varname", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="varname"; return _t;
  }
  public Object hex() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"hex"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _push("0123456789abcdefABCDEF"); _t=oneOf();
    _t=_memoize("JMetaParser"+"."+"hex", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="hex"; return _t;
  }
  public Object echar() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"echar"); if (_t!=NOT_MEMOIZED) return _t;
    Object c=null;    do {
    _t=ERROR; do{ //or
      
      if (_t!=ERROR) break;

      { int _p16=_pos; _t=ERROR; do { //and
        _t=_str("\\");
        if (_t==ERROR) break;
        _t=_any();
        c=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=__act15(c);
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p16; }
      if (_t!=ERROR) break;

      _t=_any();
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"echar", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="echar"; return _t;
  }
  public Object tsString() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"tsString"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p20=_pos; _t=ERROR; do { //and
      _t=_str("\"");
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as18=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p17=_pos; _t=ERROR; do { //and
                    _t=_str("\"");
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=echar();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p17; }
      if (_t==ERROR) break; else as18.add(_t);
      } _t=as18;
      xs=_t;
      if (_t==ERROR) break;
      _t=_str("\"");
      if (_t==ERROR) break;
      _t=__act19(xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p20; }
    _t=_memoize("JMetaParser"+"."+"tsString", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="tsString"; return _t;
  }
  public Object dollar() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"dollar"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null; Object n=null;    do {
    _t=ERROR; do{ //or
      { int _p23=_pos; _t=ERROR; do { //and
        _t=_str("${");
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as21=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=cbraces();
        if (_t==ERROR) break; else as21.add(_t);
        } _t=as21;
        xs=_t;
        if (_t==ERROR) break;
        _t=_str("}");
        if (_t==ERROR) break;
        _t=__act22(xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p23; }
      if (_t!=ERROR) break;

      { int _p25=_pos; _t=ERROR; do { //and
        _t=_str("$");
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=__act24(xs,n);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p25; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"dollar", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="dollar"; return _t;
  }
  public Object dollarstring() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"dollarstring"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p29=_pos; _t=ERROR; do { //and
      _t=_str("\"");
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as27=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p26=_pos; _t=ERROR; do { //and
                    _t=_str("\"");
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=ERROR; do{ //or
            _t=dollar();
            if (_t!=ERROR) break;

            _t=echar();
            if (_t!=ERROR) break;
          } while(false);
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p26; }
      if (_t==ERROR) break; else as27.add(_t);
      } _t=as27;
      xs=_t;
      if (_t==ERROR) break;
      _t=_str("\"");
      if (_t==ERROR) break;
      _t=__act28(xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p29; }
    _t=_memoize("JMetaParser"+"."+"dollarstring", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="dollarstring"; return _t;
  }
  public Object string() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"string"); if (_t!=NOT_MEMOIZED) return _t;
    Object s=null;    do {
    { int _p30=_pos; _t=ERROR; do { //and
      _t=tsString();
      s=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Str", s};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p30; }
    _t=_memoize("JMetaParser"+"."+"string", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="string"; return _t;
  }
  public Object number() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"number"); if (_t!=NOT_MEMOIZED) return _t;
    Object sign=null; Object ds=null;    do {
    { int _p33=_pos; _t=ERROR; do { //and
      _t=ERROR; do{ //or
        _t=_str("-");
        if (_t!=ERROR) break;

        _t=_str("+");
        if (_t!=ERROR) break;

        _t=empty();
        if (_t!=ERROR) break;
      } while(false);
      sign=_t;
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as31=new java.util.ArrayList<Object>();
      _t=digit();
      if (_t!=ERROR) { as31.add(_t);
        while (true) { //many
        _t=digit();
        if (_t==ERROR) break; else as31.add(_t);
        } _t=as31;
      }
      ds=_t;
      if (_t==ERROR) break;
      _t=__act32(sign,ds);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p33; }
    _t=_memoize("JMetaParser"+"."+"number", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="number"; return _t;
  }
  public Object symbol() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"symbol"); if (_t!=NOT_MEMOIZED) return _t;
    Object s=null;    do {
    { int _p35=_pos; _t=ERROR; do { //and
      _t=ERROR; do{ //or
        { int _p34=_pos; _t=ERROR; do { //and
          _t=_str("'");
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p34; }
        if (_t!=ERROR) break;

        _t=_str(":");
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) break;
      _t=name();
      s=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Sym", s};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p35; }
    _t=_memoize("JMetaParser"+"."+"symbol", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="symbol"; return _t;
  }
  public Object k() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"k"); if (_t!=NOT_MEMOIZED) return _t;
    Object keyword=null;    do {
    { int _p36=_pos; _t=ERROR; do { //and
      _t=_any();
      keyword=_t;
      if (_t==ERROR) break;
      _push(keyword); _t=str();
      if (_t==ERROR) break;
            _t=ERROR; do{ //or
        _t=nameFirst();
        if (_t!=ERROR) break;

        _t=digit();
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) { _t=true; } else { _t=ERROR; }
      if (_t==ERROR) break;
      _t=keyword;
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p36; }
    _t=_memoize("JMetaParser"+"."+"k", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="k"; return _t;
  }
  public Object error() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"error"); if (_t!=NOT_MEMOIZED) return _t;
    Object msg=null;    do {
    { int _p37=_pos; _t=ERROR; do { //and
      _t=_str("!");
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        _t=dollarstring();
        if (_t!=ERROR) break;

        _t=empty();
        if (_t!=ERROR) break;
      } while(false);
      msg=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Error", msg};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p37; }
    _t=_memoize("JMetaParser"+"."+"error", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="error"; return _t;
  }
  public Object any() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"any"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    { int _p38=_pos; _t=ERROR; do { //and
      _t=_str("_");
      if (_t==ERROR) break;
      _t=new Object[] {"App", "_any"};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p38; }
    _t=_memoize("JMetaParser"+"."+"any", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="any"; return _t;
  }
  public Object wsdot() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"wsdot"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    { int _p39=_pos; _t=ERROR; do { //and
      _t=_str(".");
      if (_t==ERROR) break;
      _t=new Object[] {"Dot"};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p39; }
    _t=_memoize("JMetaParser"+"."+"wsdot", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="wsdot"; return _t;
  }
  public Object args() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"args"); if (_t!=NOT_MEMOIZED) return _t;
    Object as=null;    do {
    _t=ERROR; do{ //or
      { int _p40=_pos; _t=ERROR; do { //and
        _t=_str("(");
        if (_t==ERROR) break;
        _push("simplehost", ","); _t=listOf();
        as=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str(")");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=as;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p40; }
      if (_t!=ERROR) break;

      { int _p41=_pos; _t=ERROR; do { //and
        _t=empty();
        if (_t==ERROR) break;
        _t=new Object[] {};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p41; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"args", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="args"; return _t;
  }
  public Object application() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"application"); if (_t!=NOT_MEMOIZED) return _t;
    Object r=null; Object as=null;    do {
    _t=ERROR; do{ //or
      { int _p42=_pos; _t=ERROR; do { //and
        _t=_str("super.");
        if (_t==ERROR) break;
        _t=name();
        r=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=args();
        as=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=concat(new Object[] {"App", "super", r},as);
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p42; }
      if (_t!=ERROR) break;

      { int _p43=_pos; _t=ERROR; do { //and
        _t=name();
        r=_t;
        if (_t==ERROR) break;
        _t=args();
        as=_t;
        if (_t==ERROR) break;
        _t=concat(new Object[] {"App", r},as);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p43; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"application", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="application"; return _t;
  }
  public Object fname() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"fname"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null; Object t=null; Object n=null;    do {
    { int _p48=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as46=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p45=_pos; _t=ERROR; do { //and
          _t=name();
          x=_t;
          if (_t==ERROR) break;
          _t=_str(".");
          if (_t==ERROR) break;
          _t=__act44(x);
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p45; }
      if (_t==ERROR) break; else as46.add(_t);
      } _t=as46;
      t=_t;
      if (_t==ERROR) break;
      _t=name();
      n=_t;
      if (_t==ERROR) break;
      _t=__act47(x,t,n);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p48; }
    _t=_memoize("JMetaParser"+"."+"fname", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="fname"; return _t;
  }
  public Object parens() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"parens"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p52=_pos; _t=ERROR; do { //and
      _t=_str("(");
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as50=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=ERROR; do{ //or
          _t=parens();
          if (_t!=ERROR) break;

          { int _p49=_pos; _t=ERROR; do { //and
                        _push("()"); _t=oneOf();
            if (_t==ERROR) { _t=true; } else { _t=ERROR; }
            if (_t==ERROR) break;
            _t=_any();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p49; }
          if (_t!=ERROR) break;
        } while(false);
      if (_t==ERROR) break; else as50.add(_t);
      } _t=as50;
      x=_t;
      if (_t==ERROR) break;
      _t=_str(")");
      if (_t==ERROR) break;
      _t=__act51(x);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p52; }
    _t=_memoize("JMetaParser"+"."+"parens", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="parens"; return _t;
  }
  public Object rewrite_expr() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"rewrite_expr"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null; Object p=null; Object c=null; Object s=null; Object xs=null;    do {
    _t=ERROR; do{ //or
      { int _p54=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=parens();
        p=_t;
        if (_t==ERROR) break;
        _t=__act53(n,p);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p54; }
      if (_t!=ERROR) break;

      { int _p55=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("^(");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=rewrite_expr();
        c=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _push("*+"); _t=oneOf();
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str(")");
        if (_t==ERROR) break;
        _t=new Object[] {"Node", n, c};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p55; }
      if (_t!=ERROR) break;

      { int _p57=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("^(");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as56=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=rewrite_expr();
        if (_t==ERROR) break; else as56.add(_t);
        } _t=as56;
        c=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str(")");
        if (_t==ERROR) break;
        _t=new Object[] {"Node", n, concat(new Object[] {"HList"},c)};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p57; }
      if (_t!=ERROR) break;

      { int _p58=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("$");
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"TLit", n};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p58; }
      if (_t!=ERROR) break;

      { int _p59=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=tsString();
        s=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HStr", s};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p59; }
      if (_t!=ERROR) break;

      { int _p60=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HLit", n};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p60; }
      if (_t!=ERROR) break;

      { int _p61=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("[");
        if (_t==ERROR) break;
        _push("rewrite_expr", ","); _t=listOf();
        xs=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("]");
        if (_t==ERROR) break;
        _t=concat(new Object[] {"HList"},xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p61; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"rewrite_expr", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="rewrite_expr"; return _t;
  }
  public Object simplehost() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"simplehost"); if (_t!=NOT_MEMOIZED) return _t;
    Object rs=null; Object ls=null; Object xs=null; Object n=null; Object s=null;    do {
    _t=ERROR; do{ //or
      { int _p62=_pos; _t=ERROR; do { //and
        _t=simplehost();
        rs=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("+");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=simplehost();
        ls=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HConcat", rs, ls};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p62; }
      if (_t!=ERROR) break;

      { int _p63=_pos; _t=ERROR; do { //and
        _t=_str("[");
        if (_t==ERROR) break;
        _push("simplehost", ","); _t=listOf();
        xs=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("]");
        if (_t==ERROR) break;
        _t=concat(new Object[] {"HList"},xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p63; }
      if (_t!=ERROR) break;

      { int _p64=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=number();
        n=_t;
        if (_t==ERROR) break;
        _t=n;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p64; }
      if (_t!=ERROR) break;

      { int _p66=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=ERROR; do{ //or
          { int _p65=_pos; _t=ERROR; do { //and
            _t=_str("'");
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p65; }
          if (_t!=ERROR) break;

          _t=_str(":");
          if (_t!=ERROR) break;
        } while(false);
        if (_t==ERROR) break;
        _t=name();
        s=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HStr", s};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p66; }
      if (_t!=ERROR) break;

      { int _p67=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=tsString();
        s=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HStr", s};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p67; }
      if (_t!=ERROR) break;

      { int _p69=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("@");
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=__act68(rs,ls,xs,n,s);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p69; }
      if (_t!=ERROR) break;

      { int _p70=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HLit", n};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p70; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"simplehost", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="simplehost"; return _t;
  }
  public Object cbraces() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"cbraces"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    _t=ERROR; do{ //or
      { int _p73=_pos; _t=ERROR; do { //and
        _t=_str("{");
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as71=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=cbraces();
        if (_t==ERROR) break; else as71.add(_t);
        } _t=as71;
        xs=_t;
        if (_t==ERROR) break;
        _t=_str("}");
        if (_t==ERROR) break;
        _t=__act72(xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p73; }
      if (_t!=ERROR) break;

      { int _p74=_pos; _t=ERROR; do { //and
                _t=_str("}");
        if (_t==ERROR) { _t=true; } else { _t=ERROR; }
        if (_t==ERROR) break;
        _t=_any();
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p74; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"cbraces", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="cbraces"; return _t;
  }
  public Object semAction() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"semAction"); if (_t!=NOT_MEMOIZED) return _t;
    Object s=null; Object xs=null;    do {
    _t=ERROR; do{ //or
      { int _p75=_pos; _t=ERROR; do { //and
        _t=_str("{");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=simplehost();
        s=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("}");
        if (_t==ERROR) break;
        _t=new Object[] {"SAct", s};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p75; }
      if (_t!=ERROR) break;

      { int _p78=_pos; _t=ERROR; do { //and
        _t=_str("{");
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as76=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=cbraces();
        if (_t==ERROR) break; else as76.add(_t);
        } _t=as76;
        xs=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str("}");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=__act77(s,xs);
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p78; }
      if (_t!=ERROR) break;

      { int _p79=_pos; _t=ERROR; do { //and
        _t=_str("->");
        if (_t==ERROR) break;
        _t=rewrite_expr();
        s=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=new Object[] {"SAct", s};
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p79; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"semAction", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="semAction"; return _t;
  }
  public Object semPred() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"semPred"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p82=_pos; _t=ERROR; do { //and
      _t=_str("?{");
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as80=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=cbraces();
      if (_t==ERROR) break; else as80.add(_t);
      } _t=as80;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str("}");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act81(xs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p82; }
    _t=_memoize("JMetaParser"+"."+"semPred", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="semPred"; return _t;
  }
  public Object synPred() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"synPred"); if (_t!=NOT_MEMOIZED) return _t;
    Object p=null; Object e=null; Object t=null;    do {
    { int _p83=_pos; _t=ERROR; do { //and
      _t=ws();
      if (_t==ERROR) break;
      _t=_str("(");
      if (_t==ERROR) break;
      _t=expr();
      p=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=_str(")");
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=_str("=>");
      if (_t==ERROR) break;
      _t=expr4();
      e=_t;
      if (_t==ERROR) break;
      _t=synPredTail();
      t=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"SynPred", new Object[] {"Peek", p}, e, t};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p83; }
    _t=_memoize("JMetaParser"+"."+"synPred", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="synPred"; return _t;
  }
  public Object synPredTail() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"synPredTail"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=ERROR; do{ //or
      { int _p84=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("|");
        if (_t==ERROR) break;
        _t=ERROR; do{ //or
          _t=synPred();
          if (_t!=ERROR) break;

          _t=expr4();
          if (_t!=ERROR) break;
        } while(false);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p84; }
      if (_t!=ERROR) break;

      _t=new Object[] {"Pred", "false"};
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"synPredTail", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="synPredTail"; return _t;
  }
  public Object token() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"token"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null;    do {
    { int _p85=_pos; _t=ERROR; do { //and
      _t=_str("$");
      if (_t==ERROR) break;
      _t=name();
      n=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Token", n};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p85; }
    _t=_memoize("JMetaParser"+"."+"token", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="token"; return _t;
  }
  public Object expr() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"expr"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p86=_pos; _t=ERROR; do { //and
      _push("expr4", "|"); _t=listOf();
      xs=_t;
      if (_t==ERROR) break;
      _t=concat(new Object[] {"Or"},xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p86; }
    _t=_memoize("JMetaParser"+"."+"expr", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="expr"; return _t;
  }
  public Object expr4() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"expr4"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p88=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as87=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=expr3();
      if (_t==ERROR) break; else as87.add(_t);
      } _t=as87;
      xs=_t;
      if (_t==ERROR) break;
      _t=concat(new Object[] {"And"},xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p88; }
    _t=_memoize("JMetaParser"+"."+"expr4", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="expr4"; return _t;
  }
  public Object optIter() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"optIter"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p93=_pos; _t=ERROR; do { //and
      _t=_any();
      x=_t;
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        { int _p89=_pos; _t=ERROR; do { //and
          _t=_str("*");
          if (_t==ERROR) break;
          _t=new Object[] {"Many", x};
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p89; }
        if (_t!=ERROR) break;

        { int _p90=_pos; _t=ERROR; do { //and
          _t=_str("+");
          if (_t==ERROR) break;
          _t=new Object[] {"Many1", x};
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p90; }
        if (_t!=ERROR) break;

        { int _p91=_pos; _t=ERROR; do { //and
          _t=_str("?");
          if (_t==ERROR) break;
          _t=new Object[] {"Opt", x};
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p91; }
        if (_t!=ERROR) break;

        { int _p92=_pos; _t=ERROR; do { //and
          _t=empty();
          if (_t==ERROR) break;
          _t=x;
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p92; }
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p93; }
    _t=_memoize("JMetaParser"+"."+"optIter", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="optIter"; return _t;
  }
  public Object expr3() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"expr3"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null; Object e=null; Object x=null;    do {
    _t=ERROR; do{ //or
      { int _p94=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("=");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=expr2();
        e=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _push(e); _t=optIter();
        x=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=new Object[] {"Set", n, x};
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p94; }
      if (_t!=ERROR) break;

      { int _p95=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=expr2();
        e=_t;
        if (_t==ERROR) break;
        _push(e); _t=optIter();
        x=_t;
        if (_t==ERROR) break;
        _t=x;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p95; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"expr3", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="expr3"; return _t;
  }
  public Object expr2() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"expr2"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    _t=ERROR; do{ //or
      { int _p96=_pos; _t=ERROR; do { //and
        _t=_str("~");
        if (_t==ERROR) break;
        _t=expr2();
        x=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=new Object[] {"Not", x};
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p96; }
      if (_t!=ERROR) break;

      { int _p97=_pos; _t=ERROR; do { //and
        _t=_str("&");
        if (_t==ERROR) break;
        _t=expr1();
        x=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=new Object[] {"Peek", x};
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p97; }
      if (_t!=ERROR) break;

      _t=expr1();
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"expr2", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="expr2"; return _t;
  }
  public Object expr1() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"expr1"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    _t=ERROR; do{ //or
      _t=wsdot();
      if (_t!=ERROR) break;

      _t=any();
      if (_t!=ERROR) break;

      _t=error();
      if (_t!=ERROR) break;

      _t=semPred();
      if (_t!=ERROR) break;

      _t=semAction();
      if (_t!=ERROR) break;

      _t=application();
      if (_t!=ERROR) break;

      _t=token();
      if (_t!=ERROR) break;

      { int _p98=_pos; _t=ERROR; do { //and
        _t=ERROR; do{ //or
          _push("null"); _t=k();
          if (_t!=ERROR) break;

          _push("true"); _t=k();
          if (_t!=ERROR) break;

          _push("false"); _t=k();
          if (_t!=ERROR) break;
        } while(false);
        x=_t;
        if (_t==ERROR) break;
        _t=new Object[] {"HLit", x};
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p98; }
      if (_t!=ERROR) break;

      _t=string();
      if (_t!=ERROR) break;

      _t=symbol();
      if (_t!=ERROR) break;

      _t=number();
      if (_t!=ERROR) break;

      { int _p99=_pos; _t=ERROR; do { //and
        _t=_str("[");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=expr();
        x=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str("]");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=new Object[] {"List", x};
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p99; }
      if (_t!=ERROR) break;

      _t=synPred();
      if (_t!=ERROR) break;

      { int _p100=_pos; _t=ERROR; do { //and
        _t=_str("(");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=expr();
        x=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str(")");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=x;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p100; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"expr1", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="expr1"; return _t;
  }
  public Object rule() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"rule"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null; Object x=null; Object xs=null;    do {
    { int _p105=_pos; _t=ERROR; do { //and
      { int _l102=_pos;
      { int _p101=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=rulename();
        n=_t;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p101; }
      if (_t!=ERROR) { _pos=_l102; }}
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _push(n); _t=rulePart();
      x=_t;
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as104=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p103=_pos; _t=ERROR; do { //and
          _t=ws();
          if (_t==ERROR) break;
          _t=_str(";");
          if (_t==ERROR) break;
          _t=ws();
          if (_t==ERROR) break;
          _push(n); _t=rulePart();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p103; }
      if (_t==ERROR) break; else as104.add(_t);
      } _t=as104;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str(";");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=new Object[] {"Rule", n, concat(new Object[] {"Or", x},xs)};
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p105; }
    _t=_memoize("JMetaParser"+"."+"rule", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="rule"; return _t;
  }
  public Object rulePart() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"rulePart"); if (_t!=NOT_MEMOIZED) return _t;
    Object rn=null; Object n=null; Object l=null; Object s=null; Object c=null;    do {
    { int _p109=_pos; _t=ERROR; do { //and
      _t=_any();
      rn=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=name();
      n=_t;
      if (_t==ERROR) break;
      if (!__pred106(rn,n)) _t=ERROR;
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        { int _p108=_pos; _t=ERROR; do { //and
          { int _p107=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("scope"); _t=k();
            if (_t==ERROR) break;
            _t=_str("(");
            if (_t==ERROR) break;
            _push("varname", ","); _t=listOf();
            l=_t;
            if (_t==ERROR) break;
            _t=ws();
            if (_t==ERROR) break;
            _t=_str(")");
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p107; }
          s=_t;
          if (_t==ERROR) break;
          _t=ruleStuff();
          c=_t;
          if (_t==ERROR) break;
          _t=new Object[] {"Scope", l, c};
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p108; }
        if (_t!=ERROR) break;

        _t=ruleStuff();
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p109; }
    _t=_memoize("JMetaParser"+"."+"rulePart", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="rulePart"; return _t;
  }
  public Object ruleStuff() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"ruleStuff"); if (_t!=NOT_MEMOIZED) return _t;
    Object b1=null; Object b2=null;    do {
    { int _p112=_pos; _t=ERROR; do { //and
      _t=ws();
      if (_t==ERROR) break;
      _t=expr4();
      b1=_t;
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        { int _p110=_pos; _t=ERROR; do { //and
          _t=ws();
          if (_t==ERROR) break;
          _t=_str(":");
          if (_t==ERROR) break;
          _t=ws();
          if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
          _t=expr();
          b2=_t;
          if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
          _t=new Object[] {"And", b1, b2};
          if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        } while(false); if (_t==ERROR) _pos=_p110; }
        if (_t!=ERROR) break;

        { int _p111=_pos; _t=ERROR; do { //and
          _t=empty();
          if (_t==ERROR) break;
          _t=b1;
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p111; }
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p112; }
    _t=_memoize("JMetaParser"+"."+"ruleStuff", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="ruleStuff"; return _t;
  }
  public Object qualifiers() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"qualifiers"); if (_t!=NOT_MEMOIZED) return _t;
    Object qs=null;    do {
    { int _p120=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as118=new java.util.ArrayList<Object>();
      _t=ERROR; do{ //or
          { int _p113=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("public"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p113; }
          if (_t!=ERROR) break;

          { int _p114=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("private"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p114; }
          if (_t!=ERROR) break;

          { int _p115=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("final"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p115; }
          if (_t!=ERROR) break;

          { int _p116=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("static"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p116; }
          if (_t!=ERROR) break;

          { int _p117=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("abstract"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p117; }
          if (_t!=ERROR) break;
        } while(false);
      if (_t!=ERROR) { as118.add(_t);
        while (true) { //many
        _t=ERROR; do{ //or
          { int _p113=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("public"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p113; }
          if (_t!=ERROR) break;

          { int _p114=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("private"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p114; }
          if (_t!=ERROR) break;

          { int _p115=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("final"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p115; }
          if (_t!=ERROR) break;

          { int _p116=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("static"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p116; }
          if (_t!=ERROR) break;

          { int _p117=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _push("abstract"); _t=k();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p117; }
          if (_t!=ERROR) break;
        } while(false);
        if (_t==ERROR) break; else as118.add(_t);
        } _t=as118;
      }
      qs=_t;
      if (_t==ERROR) break;
      _t=__act119(qs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p120; }
    _t=_memoize("JMetaParser"+"."+"qualifiers", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="qualifiers"; return _t;
  }
  public Object method() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"method"); if (_t!=NOT_MEMOIZED) return _t;
    Object q=null; Object r=null; Object n=null; Object as=null; Object bs=null; Object s=null;    do {
    _t=ERROR; do{ //or
      { int _p125=_pos; _t=ERROR; do { //and
        _t=qualifiers();
        q=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        r=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("(");
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as122=new java.util.ArrayList<Object>();
        while (true) { //many
        { int _p121=_pos; _t=ERROR; do { //and
                        _t=_str(")");
            if (_t==ERROR) { _t=true; } else { _t=ERROR; }
            if (_t==ERROR) break;
            _t=_any();
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p121; }
        if (_t==ERROR) break; else as122.add(_t);
        } _t=as122;
        as=_t;
        if (_t==ERROR) break;
        _t=_str(")");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=_str("{");
        if (_t==ERROR) break;
        java.util.ArrayList<Object> as123=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=cbraces();
        if (_t==ERROR) break; else as123.add(_t);
        } _t=as123;
        bs=_t;
        if (_t==ERROR) break;
        _t=_str("}");
        if (_t==ERROR) break;
        _t=__act124(q,r,n,as,bs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p125; }
      if (_t!=ERROR) break;

      { int _p131=_pos; _t=ERROR; do { //and
        _t=_str("def");
        if (_t==ERROR) break;
        _t=ws();
        if (_t==ERROR) break;
        _t=ERROR; do{ //or
          _t=_str("self.");
          if (_t!=ERROR) break;

          _t="";
          if (_t!=ERROR) break;
        } while(false);
        s=_t;
        if (_t==ERROR) break;
        _t=name();
        n=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=ERROR; do{ //or
          { int _p128=_pos; _t=ERROR; do { //and
            _t=ws();
            if (_t==ERROR) break;
            _t=_str("(");
            if (_t==ERROR) break;
            java.util.ArrayList<Object> as127=new java.util.ArrayList<Object>();
            while (true) { //many
            { int _p126=_pos; _t=ERROR; do { //and
                                _t=_str(")");
                if (_t==ERROR) { _t=true; } else { _t=ERROR; }
                if (_t==ERROR) break;
                _t=_any();
                if (_t==ERROR) break;
              } while(false); if (_t==ERROR) _pos=_p126; }
            if (_t==ERROR) break; else as127.add(_t);
            } _t=as127;
            as=_t;
            if (_t==ERROR) break;
            _t=_str(")");
            if (_t==ERROR) break;
          } while(false); if (_t==ERROR) _pos=_p128; }
          if (_t!=ERROR) break;

          _t="";
          if (_t!=ERROR) break;
        } while(false);
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=ws();
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str("{");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        java.util.ArrayList<Object> as129=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=cbraces();
        if (_t==ERROR) break; else as129.add(_t);
        } _t=as129;
        bs=_t;
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=_str("}");
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
        _t=__act130(q,r,n,as,bs,s);
        if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      } while(false); if (_t==ERROR) _pos=_p131; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"method", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="method"; return _t;
  }
  public Object field() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"field"); if (_t!=NOT_MEMOIZED) return _t;
    Object q=null; Object t=null; Object n=null; Object xs=null;    do {
    { int _p135=_pos; _t=ERROR; do { //and
      _t=qualifiers();
      q=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=name();
      t=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=name();
      n=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _t=_str("=");
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as133=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p132=_pos; _t=ERROR; do { //and
                    _t=_str(";");
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=_any();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p132; }
      if (_t==ERROR) break; else as133.add(_t);
      } _t=as133;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str(";");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act134(q,t,n,xs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p135; }
    _t=_memoize("JMetaParser"+"."+"field", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="field"; return _t;
  }
  public Object jimport() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"jimport"); if (_t!=NOT_MEMOIZED) return _t;
    Object stm=null; Object xs=null;    do {
    { int _p139=_pos; _t=ERROR; do { //and
      _push("import"); _t=k();
      stm=_t;
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as137=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p136=_pos; _t=ERROR; do { //and
                    _push(";\n"); _t=oneOf();
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=_any();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p136; }
      if (_t==ERROR) break; else as137.add(_t);
      } _t=as137;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
            _t=_str(";");
      if (_t==ERROR) if (_string != null) { _t=""; } else { _t=null; }
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act138(stm,xs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p139; }
    _t=_memoize("JMetaParser"+"."+"jimport", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="jimport"; return _t;
  }
  public Object jpackage() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"jpackage"); if (_t!=NOT_MEMOIZED) return _t;
    Object stm=null; Object xs=null;    do {
    { int _p143=_pos; _t=ERROR; do { //and
      _push("package"); _t=k();
      stm=_t;
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as141=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p140=_pos; _t=ERROR; do { //and
                    _t=_str(";");
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=_any();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p140; }
      if (_t==ERROR) break; else as141.add(_t);
      } _t=as141;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str(";");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act142(stm,xs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p143; }
    _t=_memoize("JMetaParser"+"."+"jpackage", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="jpackage"; return _t;
  }
  public Object classdef() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"classdef"); if (_t!=NOT_MEMOIZED) return _t;
    Object q=null; Object xs=null; Object bs=null;    do {
    { int _p148=_pos; _t=ERROR; do { //and
      _t=qualifiers();
      q=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _push("class"); _t=k();
      if (_t==ERROR) break;
      java.util.ArrayList<Object> as145=new java.util.ArrayList<Object>();
      while (true) { //many
      { int _p144=_pos; _t=ERROR; do { //and
                    _t=_str("{");
          if (_t==ERROR) { _t=true; } else { _t=ERROR; }
          if (_t==ERROR) break;
          _t=_any();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p144; }
      if (_t==ERROR) break; else as145.add(_t);
      } _t=as145;
      xs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str("{");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      java.util.ArrayList<Object> as146=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=cbraces();
      if (_t==ERROR) break; else as146.add(_t);
      } _t=as146;
      bs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str("}");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act147(q,xs,bs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p148; }
    _t=_memoize("JMetaParser"+"."+"classdef", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="classdef"; return _t;
  }
  public Object ruleMethod() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"ruleMethod"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=ERROR; do{ //or
      { int _p149=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=method();
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p149; }
      if (_t!=ERROR) break;

      { int _p150=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=field();
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p150; }
      if (_t!=ERROR) break;

      { int _p151=_pos; _t=ERROR; do { //and
        _t=ws();
        if (_t==ERROR) break;
        _t=rule();
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p151; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaParser"+"."+"ruleMethod", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="ruleMethod"; return _t;
  }
  public Object parser() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"parser"); if (_t!=NOT_MEMOIZED) return _t;
    Object p=null; Object n=null; Object sn=null; Object rs=null;    do {
    { int _p156=_pos; _t=ERROR; do { //and
      _t=ws();
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        _push("public"); _t=k();
        if (_t!=ERROR) break;

        _t=empty();
        if (_t!=ERROR) break;
      } while(false);
      p=_t;
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) break;
      _push("parser"); _t=k();
      if (_t==ERROR) break;
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=name();
      n=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ERROR; do{ //or
        { int _p152=_pos; _t=ERROR; do { //and
          _push("extends"); _t=k();
          if (_t==ERROR) break;
          _t=ws();
          if (_t==ERROR) break;
          _t=name();
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p152; }
        if (_t!=ERROR) break;

        { int _p153=_pos; _t=ERROR; do { //and
          _t=empty();
          if (_t==ERROR) break;
          _t="BaseParser";
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p153; }
        if (_t!=ERROR) break;
      } while(false);
      sn=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str("{");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      java.util.ArrayList<Object> as154=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=ruleMethod();
      if (_t==ERROR) break; else as154.add(_t);
      } _t=as154;
      rs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_str("}");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=concat(new Object[] {"Parser", p, n, sn},rs);
      p=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act155(p,n,sn,rs);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p156; }
    _t=_memoize("JMetaParser"+"."+"parser", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="parser"; return _t;
  }
  public Object line() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"line"); if (_t!=NOT_MEMOIZED) return _t;
    Object p=null; Object l=null;    do {
    { int _p158=_pos; _t=ERROR; do { //and
      _t=ws();
      p=_t;
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        _t=parser();
        if (_t!=ERROR) break;

        _t=jpackage();
        if (_t!=ERROR) break;

        _t=jimport();
        if (_t!=ERROR) break;

        _t=classdef();
        if (_t!=ERROR) break;
      } while(false);
      l=_t;
      if (_t==ERROR) break;
      _t=__act157(p,l);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p158; }
    _t=_memoize("JMetaParser"+"."+"line", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="line"; return _t;
  }
  public Object file() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"file"); if (_t!=NOT_MEMOIZED) return _t;
    Object ls=null;    do {
    { int _p160=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as159=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=line();
      if (_t==ERROR) break; else as159.add(_t);
      } _t=as159;
      ls=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=ws();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=end();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=concat(new Object[] {"File"},ls);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p160; }
    _t=_memoize("JMetaParser"+"."+"file", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="file"; return _t;
  }
  public Object start() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaParser"+"."+"start"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=file();
    _t=_memoize("JMetaParser"+"."+"start", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="start"; return _t;
  }
Object __act10(Object f, Object rs){ return join(concat(new Object[] {f}, rs)); }
Object __act13(Object p, Object n){ return ((String)p) + n; }
Object __act15(Object c){ return "\\" + c; }
Object __act19(Object xs){ return join(xs); }
Object __act22(Object xs){ return "\"+"+ join(xs)+ "+\""; }
Object __act24(Object xs, Object n){ return "\"+"+ n +"+\"";        }
Object __act28(Object xs){ return join(xs); }
Object __act32(Object sign, Object ds){ return new Object[] {"HLit", ""+ sign + join(ds)}; }
Object __act44(Object x){return ((String)x)+".";}
Object __act47(Object x, Object t, Object n){return join(t) + n;}
Object __act51(Object x){return "("+join(x)+")";}
Object __act53(Object n, Object p){ return new Object[] {"HLit", ((String)n)+p}; }
Object __act68(Object rs, Object ls, Object xs, Object n, Object s){ return new Object[] {"HLit", "@"+n}; }
Object __act72(Object xs){ return "{"+ join(xs) +"}"; }
Object __act77(Object s, Object xs){ return new Object[] {"Act", join(xs)}; }
Object __act81(Object xs){ return new Object[] {"Pred", join(xs)}; }
boolean __pred106(Object rn, Object n){ return n.equals(rn); }
Object __act119(Object qs){
        return join(qs, " ");
    }
Object __act124(Object q, Object r, Object n, Object as, Object bs){
        String body = ""+ q +" "+ r +" "+ n +"("+ join(as) +") {"+ join(bs) +"}";
        return new Object[] {"Method", body };
    }
Object __act130(Object q, Object r, Object n, Object as, Object bs, Object s){
        String body = "def " + s + n + "("+ join(as) +");" + join(bs) + ";end";
        return new Object[] {"Method", body};
    }
Object __act134(Object q, Object t, Object n, Object xs){
        String body = ""+ q +" "+ t +" "+ n +" = "+ join(xs) +";";
        return new Object[] {"Field", body } ;
    }
Object __act138(Object stm, Object xs){
        String body = stm + join(xs) +";";
        return new Object[] {"Import", body };
    }
Object __act142(Object stm, Object xs){
        String body = stm + join(xs) +";";
        return new Object[] {"Package", body };
    }
Object __act147(Object q, Object xs, Object bs){
        String decl = " class "+ join(xs);
        String body = join(bs);
        return new Object[] {"Class", q, decl, body } ;
    }
Object __act155(Object p, Object n, Object sn, Object rs){
                   if (Boolean.getBoolean("jmeta.optimize.debug")) {
                     System.out.println("Before:\n" + print_r(p));
                   }
                   return new JMetaOptimizer().parse(p, "optimizeGrammar");
                }
Object __act157(Object p, Object l){ return new Object[] {"Line", join(p), l}; }

  public Object _jump(String r) {
    if (r=="fromTo") return fromTo();
    if (r=="sp") return sp();
    if (r=="ws") return ws();
    if (r=="listOf") return listOf();
    if (r=="nameFirst") return nameFirst();
    if (r=="nameRest") return nameRest();
    if (r=="name") return name();
    if (r=="rulename") return rulename();
    if (r=="varname") return varname();
    if (r=="hex") return hex();
    if (r=="echar") return echar();
    if (r=="tsString") return tsString();
    if (r=="dollar") return dollar();
    if (r=="dollarstring") return dollarstring();
    if (r=="string") return string();
    if (r=="number") return number();
    if (r=="symbol") return symbol();
    if (r=="k") return k();
    if (r=="error") return error();
    if (r=="any") return any();
    if (r=="wsdot") return wsdot();
    if (r=="args") return args();
    if (r=="application") return application();
    if (r=="fname") return fname();
    if (r=="parens") return parens();
    if (r=="rewrite_expr") return rewrite_expr();
    if (r=="simplehost") return simplehost();
    if (r=="cbraces") return cbraces();
    if (r=="semAction") return semAction();
    if (r=="semPred") return semPred();
    if (r=="synPred") return synPred();
    if (r=="synPredTail") return synPredTail();
    if (r=="token") return token();
    if (r=="expr") return expr();
    if (r=="expr4") return expr4();
    if (r=="optIter") return optIter();
    if (r=="expr3") return expr3();
    if (r=="expr2") return expr2();
    if (r=="expr1") return expr1();
    if (r=="rule") return rule();
    if (r=="rulePart") return rulePart();
    if (r=="ruleStuff") return ruleStuff();
    if (r=="qualifiers") return qualifiers();
    if (r=="method") return method();
    if (r=="field") return field();
    if (r=="jimport") return jimport();
    if (r=="jpackage") return jpackage();
    if (r=="classdef") return classdef();
    if (r=="ruleMethod") return ruleMethod();
    if (r=="parser") return parser();
    if (r=="line") return line();
    if (r=="file") return file();
    if (r=="start") return start();
    return super._jump(r);
  }
  public boolean _has(String r) {
    if (r=="fromTo") return true;
    if (r=="sp") return true;
    if (r=="ws") return true;
    if (r=="listOf") return true;
    if (r=="nameFirst") return true;
    if (r=="nameRest") return true;
    if (r=="name") return true;
    if (r=="rulename") return true;
    if (r=="varname") return true;
    if (r=="hex") return true;
    if (r=="echar") return true;
    if (r=="tsString") return true;
    if (r=="dollar") return true;
    if (r=="dollarstring") return true;
    if (r=="string") return true;
    if (r=="number") return true;
    if (r=="symbol") return true;
    if (r=="k") return true;
    if (r=="error") return true;
    if (r=="any") return true;
    if (r=="wsdot") return true;
    if (r=="args") return true;
    if (r=="application") return true;
    if (r=="fname") return true;
    if (r=="parens") return true;
    if (r=="rewrite_expr") return true;
    if (r=="simplehost") return true;
    if (r=="cbraces") return true;
    if (r=="semAction") return true;
    if (r=="semPred") return true;
    if (r=="synPred") return true;
    if (r=="synPredTail") return true;
    if (r=="token") return true;
    if (r=="expr") return true;
    if (r=="expr4") return true;
    if (r=="optIter") return true;
    if (r=="expr3") return true;
    if (r=="expr2") return true;
    if (r=="expr1") return true;
    if (r=="rule") return true;
    if (r=="rulePart") return true;
    if (r=="ruleStuff") return true;
    if (r=="qualifiers") return true;
    if (r=="method") return true;
    if (r=="field") return true;
    if (r=="jimport") return true;
    if (r=="jpackage") return true;
    if (r=="classdef") return true;
    if (r=="ruleMethod") return true;
    if (r=="parser") return true;
    if (r=="line") return true;
    if (r=="file") return true;
    if (r=="start") return true;
    return super._has(r);
  }
}



 class JMetaPass extends BaseParser {  public boolean changed =  false;

  public Object setChanged() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"setChanged"); if (_t!=NOT_MEMOIZED) return _t;
        do {
    _t=__act161();
    _t=_memoize("JMetaPass"+"."+"setChanged", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="setChanged"; return _t;
  }
  public Object destruct() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"destruct"); if (_t!=NOT_MEMOIZED) return _t;
    Object r=null; Object x=null;    do {
    { int _p163=_pos; _t=ERROR; do { //and
      _t=_any();
      r=_t;
      if (_t==ERROR) break;
      if (!__pred162(r)) _t=ERROR;
      if (_t==ERROR) break;
      _push(r); _t=apply();
      x=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=end();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=x;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p163; }
    _t=_memoize("JMetaPass"+"."+"destruct", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="destruct"; return _t;
  }
  public Object trans() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"trans"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    _t=ERROR; do{ //or
      { int _p164=_pos; _t=ERROR; do { //and
        _t=_listBegin(); if (_t!=ERROR) {
          _t=destruct();
          x=_t;
        _listEnd(); }
        if (_t==ERROR) break;
        _t=x;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p164; }
      if (_t!=ERROR) break;

      _t=_any();
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaPass"+"."+"trans", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="trans"; return _t;
  }
  public Object Or() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Or"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p166=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as165=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=trans();
      if (_t==ERROR) break; else as165.add(_t);
      } _t=as165;
      xs=_t;
      if (_t==ERROR) break;
      _t=concat(new Object[] {"Or"},xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p166; }
    _t=_memoize("JMetaPass"+"."+"Or", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Or"; return _t;
  }
  public Object And() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"And"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p168=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as167=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=trans();
      if (_t==ERROR) break; else as167.add(_t);
      } _t=as167;
      xs=_t;
      if (_t==ERROR) break;
      _t=concat(new Object[] {"And"},xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p168; }
    _t=_memoize("JMetaPass"+"."+"And", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="And"; return _t;
  }
  public Object Not() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Not"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p169=_pos; _t=ERROR; do { //and
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Not", x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p169; }
    _t=_memoize("JMetaPass"+"."+"Not", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Not"; return _t;
  }
  public Object Many() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Many"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p170=_pos; _t=ERROR; do { //and
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Many", x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p170; }
    _t=_memoize("JMetaPass"+"."+"Many", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Many"; return _t;
  }
  public Object Many1() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Many1"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p171=_pos; _t=ERROR; do { //and
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Many1", x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p171; }
    _t=_memoize("JMetaPass"+"."+"Many1", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Many1"; return _t;
  }
  public Object Peek() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Peek"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p172=_pos; _t=ERROR; do { //and
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Peek", x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p172; }
    _t=_memoize("JMetaPass"+"."+"Peek", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Peek"; return _t;
  }
  public Object List() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"List"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null;    do {
    { int _p173=_pos; _t=ERROR; do { //and
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"List", x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p173; }
    _t=_memoize("JMetaPass"+"."+"List", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="List"; return _t;
  }
  public Object Set() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Set"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null; Object x=null;    do {
    { int _p174=_pos; _t=ERROR; do { //and
      _t=_any();
      n=_t;
      if (_t==ERROR) break;
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Set", n, x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p174; }
    _t=_memoize("JMetaPass"+"."+"Set", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Set"; return _t;
  }
  public Object Rule() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"Rule"); if (_t!=NOT_MEMOIZED) return _t;
    Object n=null; Object x=null;    do {
    { int _p175=_pos; _t=ERROR; do { //and
      _t=_any();
      n=_t;
      if (_t==ERROR) break;
      _t=trans();
      x=_t;
      if (_t==ERROR) break;
      _t=new Object[] {"Rule", n, x};
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p175; }
    _t=_memoize("JMetaPass"+"."+"Rule", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Rule"; return _t;
  }
  public Object SynPred() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"SynPred"); if (_t!=NOT_MEMOIZED) return _t;
    Object xs=null;    do {
    { int _p177=_pos; _t=ERROR; do { //and
      java.util.ArrayList<Object> as176=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=trans();
      if (_t==ERROR) break; else as176.add(_t);
      } _t=as176;
      xs=_t;
      if (_t==ERROR) break;
      _t=concat(new Object[] {"SynPred"},xs);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p177; }
    _t=_memoize("JMetaPass"+"."+"SynPred", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="SynPred"; return _t;
  }
  public Object start() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaPass"+"."+"start"); if (_t!=NOT_MEMOIZED) return _t;
    Object r=null;    do {
    _t=ERROR; do{ //or
      { int _p178=_pos; _t=ERROR; do { //and
        _t=destruct();
        r=_t;
        if (_t==ERROR) break;
        _t=end();
        if (_t==ERROR) break;
        _t=r;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p178; }
      if (_t!=ERROR) break;

      { int _p179=_pos; _t=ERROR; do { //and
        _t=_any();
        r=_t;
        if (_t==ERROR) break;
        _t=end();
        if (_t==ERROR) break;
        _t=r;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p179; }
      if (_t!=ERROR) break;

      { int _p181=_pos; _t=ERROR; do { //and
        java.util.ArrayList<Object> as180=new java.util.ArrayList<Object>();
        while (true) { //many
        _t=_any();
        if (_t==ERROR) break; else as180.add(_t);
        } _t=as180;
        r=_t;
        if (_t==ERROR) break;
        _t=end();
        if (_t==ERROR) break;
        _t=r;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p181; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaPass"+"."+"start", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="start"; return _t;
  }
Object __act161(){changed = true; return null;}
boolean __pred162(Object r){return hasRule(r);}

  public Object _jump(String r) {
    if (r=="setChanged") return setChanged();
    if (r=="destruct") return destruct();
    if (r=="trans") return trans();
    if (r=="Or") return Or();
    if (r=="And") return And();
    if (r=="Not") return Not();
    if (r=="Many") return Many();
    if (r=="Many1") return Many1();
    if (r=="Peek") return Peek();
    if (r=="List") return List();
    if (r=="Set") return Set();
    if (r=="Rule") return Rule();
    if (r=="SynPred") return SynPred();
    if (r=="start") return start();
    return super._jump(r);
  }
  public boolean _has(String r) {
    if (r=="setChanged") return true;
    if (r=="destruct") return true;
    if (r=="trans") return true;
    if (r=="Or") return true;
    if (r=="And") return true;
    if (r=="Not") return true;
    if (r=="Many") return true;
    if (r=="Many1") return true;
    if (r=="Peek") return true;
    if (r=="List") return true;
    if (r=="Set") return true;
    if (r=="Rule") return true;
    if (r=="SynPred") return true;
    if (r=="start") return true;
    return super._has(r);
  }
}



 class JMetaAndOrOpt extends JMetaPass {
  public Object And() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaAndOrOpt"+"."+"And"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null; Object xs=null;    do {
    _t=ERROR; do{ //or
      { int _p182=_pos; _t=ERROR; do { //and
        _t=trans();
        x=_t;
        if (_t==ERROR) break;
        _t=end();
        if (_t==ERROR) break;
        _t=setChanged();
        if (_t==ERROR) break;
        _t=x;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p182; }
      if (_t!=ERROR) break;

      { int _p183=_pos; _t=ERROR; do { //and
        _push("And"); _t=transInside();
        xs=_t;
        if (_t==ERROR) break;
        _t=concat(new Object[] {"And"},xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p183; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaAndOrOpt"+"."+"And", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="And"; return _t;
  }
  public Object Or() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaAndOrOpt"+"."+"Or"); if (_t!=NOT_MEMOIZED) return _t;
    Object x=null; Object xs=null;    do {
    _t=ERROR; do{ //or
      { int _p184=_pos; _t=ERROR; do { //and
        _t=trans();
        x=_t;
        if (_t==ERROR) break;
        _t=end();
        if (_t==ERROR) break;
        _t=setChanged();
        if (_t==ERROR) break;
        _t=x;
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p184; }
      if (_t!=ERROR) break;

      { int _p185=_pos; _t=ERROR; do { //and
        _push("Or"); _t=transInside();
        xs=_t;
        if (_t==ERROR) break;
        _t=concat(new Object[] {"Or"},xs);
        if (_t==ERROR) break;
      } while(false); if (_t==ERROR) _pos=_p185; }
      if (_t!=ERROR) break;
    } while(false);
    _t=_memoize("JMetaAndOrOpt"+"."+"Or", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="Or"; return _t;
  }
  public Object transInside() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaAndOrOpt"+"."+"transInside"); if (_t!=NOT_MEMOIZED) return _t;
    Object s=null; Object xs=null; Object ys=null; Object x=null;    do {
    { int _p189=_pos; _t=ERROR; do { //and
      _t=_any();
      s=_t;
      if (_t==ERROR) break;
      _t=ERROR; do{ //or
        { int _p187=_pos; _t=ERROR; do { //and
          _t=_listBegin(); if (_t!=ERROR) {
            { int _p186=_pos; _t=ERROR; do { //and
              _push(s); _t=sym();
              if (_t==ERROR) break;
              _push(s); _t=transInside();
              xs=_t;
              if (_t==ERROR) break;
            } while(false); if (_t==ERROR) _pos=_p186; }
          _listEnd(); }
          if (_t==ERROR) break;
          _push(s); _t=transInside();
          ys=_t;
          if (_t==ERROR) break;
          _t=setChanged();
          if (_t==ERROR) break;
          _t=concat(xs,ys);
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p187; }
        if (_t!=ERROR) break;

        { int _p188=_pos; _t=ERROR; do { //and
          _t=trans();
          x=_t;
          if (_t==ERROR) break;
          _push(s); _t=transInside();
          xs=_t;
          if (_t==ERROR) break;
          _t=concat(new Object[] {x},xs);
          if (_t==ERROR) break;
        } while(false); if (_t==ERROR) _pos=_p188; }
        if (_t!=ERROR) break;

        _t=new Object[] {};
        if (_t!=ERROR) break;
      } while(false);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p189; }
    _t=_memoize("JMetaAndOrOpt"+"."+"transInside", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="transInside"; return _t;
  }

  public Object _jump(String r) {
    if (r=="And") return And();
    if (r=="Or") return Or();
    if (r=="transInside") return transInside();
    return super._jump(r);
  }
  public boolean _has(String r) {
    if (r=="And") return true;
    if (r=="Or") return true;
    if (r=="transInside") return true;
    return super._has(r);
  }
}



 class JMetaOptimizer extends BaseParser {
  public Object optimizeGrammar() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaOptimizer"+"."+"optimizeGrammar"); if (_t!=NOT_MEMOIZED) return _t;
    Object p=null; Object n=null; Object sn=null; Object rs=null; Object x=null;    do {
    { int _p192=_pos; _t=ERROR; do { //and
      _t=_sym("Parser");
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_any();
      p=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_any();
      n=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=_any();
      sn=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      java.util.ArrayList<Object> as190=new java.util.ArrayList<Object>();
      while (true) { //many
      _t=optimizeRule();
      if (_t==ERROR) break; else as190.add(_t);
      } _t=as190;
      rs=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=end();
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=concat(new Object[] {"Parser", p, n, sn},rs);
      x=_t;
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
      _t=__act191(p,n,sn,rs,x);
      if (_t==ERROR) throw new SyntaxError("", _pos, _string, _list);
    } while(false); if (_t==ERROR) _pos=_p192; }
    _t=_memoize("JMetaOptimizer"+"."+"optimizeGrammar", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="optimizeGrammar"; return _t;
  }
  public Object optimizeRule() { Object _t=null; int _start=_pos;
    _t=_retrieve("JMetaOptimizer"+"."+"optimizeRule"); if (_t!=NOT_MEMOIZED) return _t;
    Object r=null;    do {
    { int _p194=_pos; _t=ERROR; do { //and
      _t=_any();
      r=_t;
      if (_t==ERROR) break;
      _t=__act193(r);
      if (_t==ERROR) break;
    } while(false); if (_t==ERROR) _pos=_p194; }
    _t=_memoize("JMetaOptimizer"+"."+"optimizeRule", _start, _t);
    } while (_t==GROW); if (_t==ERROR) ERROR.last="optimizeRule"; return _t;
  }
Object __act191(Object p, Object n, Object sn, Object rs, Object x){ if (Boolean.getBoolean("jmeta.optimize.debug")) {
                         System.out.println("Opt:\n" + print_r(x));
                       }
                       return x;
                     }
Object __act193(Object r){
        JMetaAndOrOpt opt = new JMetaAndOrOpt();
        do {
            opt.changed = false;
            r = opt.parse(r);
        } while (opt.changed);
        return r;
    }

  public Object _jump(String r) {
    if (r=="optimizeGrammar") return optimizeGrammar();
    if (r=="optimizeRule") return optimizeRule();
    return super._jump(r);
  }
  public boolean _has(String r) {
    if (r=="optimizeGrammar") return true;
    if (r=="optimizeRule") return true;
    return super._has(r);
  }
}
