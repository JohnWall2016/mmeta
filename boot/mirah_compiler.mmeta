// copyright 2009 ActiveVideo; license: MIT; see license.txt
package jmeta;
import java.util.*;

public parser MMetaCompiler {
    def self.main(args:String[]) {
      returns void
      if args.length < 1
          puts "JMetaParser <input> [output]"
          System.exit(2)
      end
      # if args.length > 1 && args[1].equals("--embed")
      #     embed = true
      # end
      if args.length > 1
        output_file = args[1]
      else
        output_file = args[0] + ".mirah"
      end
      input = Utils.readFile(args[0])
      compiler = MMetaCompiler.new
      # compiler.embedded = embed
      parser = JMetaParser.new
      ast = parser.parse(input)
      #puts BaseParser.print_r(ast)
      #BaseParser.tracing = true
      output = String(compiler.parse(ast))
      Utils.writeFile(output_file, output)
      System.exit(0)
    }

    def initialize {
      @jpackage = String(nil)
      @embedded = false
      @locals = ArrayList.new
      @methods = ArrayList.new
      @rules = ArrayList.new
      @sname = "__ERROR__-sname-__ERROR__"
      @name = "__ERROR__-name-__ERROR__"
      @_ = "  "
      @__genc = -1
    }
    def reset {
        @locals = ArrayList.new
        @methods = ArrayList.new
        @rules = ArrayList.new
    }

    def addLocal(n:Object) {
        s = String(n).intern
        @locals.add(s) unless @locals.contains(s)
    }
    def localsAsArgs {
      localsAsCall
    }
    def localsAsCall {
        join(@locals, ",")
    }
    def localsAsInit {
      return '' if @locals.size == 0
      res = join(@locals, " = ") + " = Object(nil)\n"
      @locals.clear
      res
    }

    def embedded_set(embedded:boolean) {@embeded = embedded}

    def indent  { @_ = @_ + "  " }
    def outdent { @_ = @_.substring(2) }

    def genvar { "" + (@__genc = @__genc + 1); }

    destruct: ! t=_ r=apply(t) end    { r } ;
    trans: [ r=destruct ]             { r } ;

    HList ls=trans* {
      if List(ls).size == 0
        "ArrayList.new"
      else
        "[#{join(ls, ", ")}]"
      end
    };
    HConcat l=trans r=trans { "concat(#{l}, #{r})" };
    HStr c=_ { "\"#{c}\"" };
    HLit c=_ { c } ;

    Node n=_ c=trans {"build_node('#{n}', #{c}, _real_start > 1 ? _real_start : _start, _pos)"};

    Error msg=_ {
        DoError.new(msg);
    };
    Set n=_ x=trans {
        addLocal(n);
        "#{x}\n#{@_}#{n}=_t;"
    };
    Str s=_ { "_t=_str(\"#{s}\");" };
    Sym s=_ { "_t=_sym(\"#{s}\");" };


    App :super rule=_ args=trans+ {
        arg_str = if List(args).size == 1
          join(args, ", ")
        else
          "ArrayList.new([#{join(args, ", ")}]).toArray"
        end
        "_push(#{arg_str}); _t=super();"
    };
    App :super rule=_ { "_t=super();" };
    App rule=_ args=trans+ {
        "_push(ArrayList.new([#{join(args, ", ")}]).toArray); _t=self.#{rule}();"
    };
    App rule=_ { rule = "__end__" if "end".equals(rule); "_t=self.#{rule}();" };

    # Don't include whitespace at the beginning of the rule in it's position
    Dot {"if _start == _pos;_t=ws();_real_start=_pos;nil;else;_t=ws();end;"};

    SAct expr=trans { "_t=#{expr};" };
    Act expr=_ {
        "_t=(#{expr});"
    };
    Pred expr=_ {
        "_t = (#{expr}) ? nil : __ERROR__;"
    };


    Or indent xs=(x=trans { "#{@_}#{x}\n#{@_}break unless _t == __ERROR__\n" }
        )* { "_t=__ERROR__; begin  # or\n#{join(xs, "\n")}#{outdent}end while false\n" };


    And indent ts=trans+ {
        var = genvar
        err = null
        xs = List(ts)
        b = "begin; _p#{var}=_pos; _t=__ERROR__; begin  # and\n"
        xs.each do |x|
          if x.kind_of?(DoError)
            err = DoError(x).message
            next
          end
          b = if err.nil?
            "#{b}#{@_}#{x}\n#{@_}break if _t == __ERROR__\n"
          else
            "#{b}#{@_}#{x}\n#{@_}raise SyntaxError.new(\"#{err}\", _pos, _string, _list) if _t == __ERROR__\n"
          end
        end
        outdent();
        "#{b}#{@_}end while false; self._pos=_p#{var} if (_t==__ERROR__); end\n"
    };
    And { "" };

    def makeMany(x:Object, many1:boolean) {
        var = genvar
        b = "as#{var} = ArrayList.new\n"
        if (many1)
          b = "#{b}#{@_}#{x}\n#{@_}if (_t!=__ERROR__)\n#{indent}as#{var}.add(_t)\n"
        end

        b = "#{b}#{@_}while true  # many\n" +
            "#{@_}#{x}\n" +
            "#{@_}if (_t==__ERROR__); break; else as#{var}.add(_t);nil;end\n" +
            "#{@_}end; _t=as#{var}\n"

        if (many1)
          b= "#{b}\n#{outdent}end\n"
        end
        b;
    }
    Many  indent x=trans outdent { makeMany(x, false) } ;
    Many1 indent x=trans outdent { makeMany(x, true)  } ;

    Opt indent x=trans outdent { "#{@_}#{x}\n_t=(_string.nil? ? \"\" : nil) if _t == __ERROR__;" };

    Not x=trans { "#{@_}#{x}\n_t = (_t == __ERROR__ ? Object(Boolean.valueOf(true)) : __ERROR__);"};

    Peek x=trans {
      var = genvar
      
      "begin\n#{indent}_l#{var}=_pos\n#{@_}#{x}\n#{@_}self._pos=_l#{var} if (_t!=__ERROR__)\n#{outdent}end\n"
    };

    List indent x=trans outdent {
        "_t=_listBegin(); if (_t!=__ERROR__)\n#{@_}  #{x}\n#{@_}_listEnd(); end;"
    };

    Rule n=_ b=trans {
      @rules.add(n)
      "
  def #{n}
    _t=Object(nil); _start=_pos; _real_start=-1;
    _t=_retrieve(\"#{@name}.#{n}\"); return _t if (_t!=__NOT_MEMOIZED__)
    #{localsAsInit}    begin
    #{b}
    _t=_memoize(\"#{@name}.#{n}\", _start, _t);
    end while (_t==__GROW__); __ERROR__.last=\"#{n}\" if (_t==__ERROR__); return _t;
  end
"
    };

    Parser p=_ n=_ s=_ { @name = String(n); @sname = String(s); nil } xs=trans* {
        b = "\nclass #{@name} < #{@sname}\n" +
            join(xs) + "\n" + join(@methods) + "\n" +
            "  def _jump(r:string)\n"

        @rules.each do |r|
          b = "#{b}    return #{r}() if (r==\"#{r}\")\n"
        end
        b = b +
            "    super(r)\n" +
            "  end\n" +
            "  def _has(r:string)\n"

        @rules.each do |r|
          b = b + "    return true if r==\"#{r}\"\n"
        end

        b = b +
            "    super(r)\n" +
            "  end\n" +
            "end\n"
        reset
        b
    };

    Method  c=_ { "  #{c}\n" } ;
    Field   c=_ { "  #{c}\n" } ;
    Package c=_ { @jpackage = String(c); ""; } ;
    Import  c=_ { c } ;
    Class   q=_ d=_ c=_ { "#{d}\n#{c}\nend" } ;
    Line  ws=_ x=trans { ws.toString + x.toString } ;

    File  xs=trans* {
        "# generated by mmeta on #{Date.new}\n" +
        "# do not modify, instead edit original .mmeta file\n" +
        "import java.util.ArrayList\n" +
        "import java.util.Date\n" +
        "import java.util.List\n" +
        (@embedded ? "" : "import jmeta.*;\n") + join(xs)
    } ;

    start: ! r=destruct end           { r } ;
}
