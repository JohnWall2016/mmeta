// copyright 2009 ActiveVideo; license: MIT; see license.txt
package jmeta;
import java.util.*;

public parser MMetaCompiler2 {
    public Object jpackage = null;
    public boolean embedded = false;
    public ArrayList locals  = new ArrayList();
    public ArrayList methods = new ArrayList();
    public ArrayList rules   = new ArrayList();
    public void reset() {
        locals = new ArrayList();
        methods = new ArrayList();
        rules = new ArrayList();
    }
    public String sname      = "ERROR-sname-ERROR";
    public String name       = "ERROR-name-ERROR";

    public void addLocal(Object n) {
        String s = ((String)n).intern();
        if (! locals.contains(s)) locals.add(s);
    }
    public String localsAsArgs() {
        return localsAsCall();
    }
    public String localsAsCall() {
        return join(locals, ",");
    }
    public String localsAsInit() {
      if (locals.size() == 0) return "";
      String res = join(locals, " = ") + " = Object(nil)\n";
      locals.clear();
      return res;
    }

    public static void main(String[] args) {
        boolean embed = false;
        if (args.length < 1) {
            System.out.println("JMetaParser <input> [--embed]");
            System.exit(2);
        }
        if (args.length > 1 && args[1].equals("--embed")) {
            embed = true;
        }
        try {
            String input = Utils.readFile(args[0]);
            MMetaCompiler2 compiler = new MMetaCompiler2(); compiler.embedded = embed;
            JMetaParser parser = new JMetaParser();
            //parser.tracing = true;
            String output = (String) compiler.parse(parser.parse(input));
            Utils.writeFile(args[0]+".mirah", output);
            System.exit(0);
        } catch (SyntaxError ex) {
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.exit(1);
    }

    public String w(Object... as) {
        StringBuffer sb = new StringBuffer();
        for (Object a : as) sb.append(a);
        return sb.toString();
    }

    public String _ = "  ";
    public Object indent()  { _ = _ + "  "; return _; }
    public Object outdent() { _ = _.substring(2); return _; }

    public int __genc = 0;
    public String genvar() { return ""+ __genc++; }

    destruct: ! t=_ r=apply(t) end    { r } ;
    trans: [ r=destruct ]             { r } ;

    HList ls=trans* { return w(
        "[", join(ls, ", "), "]"
    ); };
    HConcat l=trans r=trans { return w(
        "concat(", l, ",", r, ")"
    ); };
    HStr c=_ { return "\""+ Utils.escape(c) +"\""; } ;
    HLit c=_ { c } ;

    Error msg=_ {
        return new DoError(msg);
    };
    Set n=_ x=trans {
        addLocal(n);
        return w(
            x, "\n",
            _, n, "=_t;"
        );
    };
    Str s=_ { return w(
        "_t=_str(\"", Utils.escape(s), "\");"
    ); };
    Sym s=_ { return w(
        "_t=_sym(\"", s, "\");"
    ); };


    App :super rule=_ args=trans+ { return w(
        "_push(ArrayList.new([", join(args, ", "), "]).toArray); _t=super();"
    ); };
    App :super rule=_ { return w(
        "_t=super();"
    ); };
    App rule=_ args=trans+ { return w(
        "_push(ArrayList.new([", join(args, ", "), "]).toArray); _t=", rule, "();"
    ); };
    App rule=_ {
      if ("end".equals(rule)) {rule = "__end__";}
      return w(
        "_t=", rule, "();"
    ); };


    SAct expr=trans { return w(
        "_t=", expr, ";"
    ); };
    Act expr=_ {
        String var = genvar();
        return w(
            "_t=(", expr, ");"
        );
    };
    Pred expr=_ {
        return w(
            "_t = __ERROR__ unless (", expr, ");"
        );
    };


    Or indent xs=(x=trans { return w(
        _, x, "\n",
        _, "break unless _t == __ERROR__\n"
    ); })* outdent { return w(
        "_t=__ERROR__; begin  # or\n",
        join(xs, "\n"),
        _, "end while false\n"
    ); };


    And indent ts=trans+ {
        String var = genvar();
        String err = null;
        Object[] xs = ((ArrayList) ts).toArray();
        String b = w(
            "begin; _p", var, "=_pos; _t=__ERROR__; begin  # and\n"
        );
        for (int i = 0; i < xs.length; i++) {
            Object x = xs[i];
            if (x instanceof DoError) { err = ((DoError)x).msg; continue; }
            if (err != null) { b = w(b,
                _, x, "\n",
                _, "syntaxError(\"", err, "\") if _t == __ERROR__\n"
            ); } else { b = w(b,
                _, x, "\n",
                _, "break if _t == __ERROR__\n"
            ); }
        }
        outdent();
        return w(b,
            _, "end while false; self._pos=_p", var, " if (_t==__ERROR__); end\n"
        );
    };
    And { return w(
        ""
    );};

    public String makeMany(Object x, boolean many1) {
        String var = genvar();
        String b = "";
        b = w(b,
            "as", var, " = ArrayList.new\n"
        );
        if (many1) { b = w(b,
            _, x, "\n",
            _, "if (_t!=__ERROR__)\n", indent(), "as", var, ".add(_t)\n"
        );}

        b = w(b,
            _, "while true  # many\n",
            _, x, "\n",
            _, "if (_t==__ERROR__); break; else as", var, ".add(_t);nil;end\n",
            _, "end; _t=as", var, "\n"
        );

        if (many1) { outdent(); b= w(b,
            "\n",
            _, "end\n"
        );};
        return b;
    }
    Many  indent x=trans outdent { return makeMany(x, false); } ;
    Many1 indent x=trans outdent { return makeMany(x, true);  } ;

    Opt indent x=trans outdent { return w(
        _, x, "\n",
        _, "_t = (_string != null ? '' : nil) if (_t == __ERROR__)"
    ); };

    Not x=trans { return w(
        _, x, "\n",
        _, "_t = (_t==__ERROR__) ? Boolean.valueOf(true) : _t=__ERROR__\n"
    );};

    Peek x=trans { String var = genvar(); return w(
        "begin; _l", var, "=_pos\n",
        _, x, "\n",
        _, "self._pos=_l", var, "if (_t!=__ERROR__);end;"
    );};

    List indent x=trans outdent { return w(
        "_t=_listBegin(); if (_t!=__ERROR__)\n",
        _, "  ", x, "\n",
        _, "_listEnd(); end;"
    );};

    Rule n=_ b=trans { rules.add(n); return w(
        "\n",
        "  def ", n, "\n    _t=Object(nil); _start=_pos;\n",
        "    _t=_retrieve(\"", name, ".", n, "\"); return _t if (_t!=__NOT_MEMOIZED__)\n",
        "    ", localsAsInit(),
        "    begin\n",
        "    ", b, "\n",
        "    _t=_memoize(\"", name, ".", n, "\", _start, _t);\n",
        "    end while (_t==__GROW__); __ERROR__.last=\"", n, "\" if (_t==__ERROR__); return _t;\n",
        "  end\n"
    );};

    Parser p=_ n=_ s=_ { name = (String)n; sname = (String)s; return null; } xs=trans* {
        String b = "\n";
        b = w(b,
            "class ", name, " < ", sname, "\n",
            join(xs), "\n",
            join(methods), "\n",
            "  def _jump(r:string)\n"
        );

        for (Object r : rules) { b = w(b,
            "    return ", r, "() if (r==\"", r, "\")\n"
        );}
        b = w(b,
            "    super(r)\n",
            "  end\n",

            "  def _has(r:String)\n"
        );
        for (Object r : rules) { b = w(b,
            "    return true if r==\"", r, "\"\n"
        );}
        b = w(b,
            "    super(r)\n",
            "  end\n",

            "end\n"
        );
        reset();
        return b;
    };

    Method  c=_ { return w("  ", c, "\n"); } ;
    Field   c=_ { return w("  ", c, "\n"); } ;
    Package c=_ { jpackage = c; return ""; } ;
    Import  c=_ { c } ;
    Class   c=_ { c } ;
    Line  ws=_ x=trans { return w(ws, x); } ;

    File  xs=trans* { return w(
        "# generated by jmeta on ", new Date(), "\n",
        "# do not modify, instead edit original .jmeta file\n",
        "import java.util.ArrayList\n",
        "import java.util.Date\n",
        (!embedded)?"import jmeta.*;\n":"",
        join(xs));
    } ;

    start: ! r=destruct end           { r } ;
}

