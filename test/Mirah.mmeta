import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.InputStream
import java.io.FileInputStream
import java.util.ArrayList
import java.util.List
import java.util.LinkedList
import java.util.Collections
import jmeta.Ast

public class HeredocContext {
  def initialize(node:Object)
    @node = Ast(node)
    @id = String(@node.get(1))
    @type = '"'
    if @id.startsWith("-")
      @id = @id.substring(1)
      @no_indent = false
    else
      @no_indent = true
    end
    if @id.startsWith("'")
      @type = "'"
      @id = @id.substring(1, @id.length - 1)
    elsif @id.startsWith('"')
      @id = @id.substring(1, @id.length - 1)
    end
  end

  def id
    @id
  end

  def node
    @node
  end

  def no_indent
    @no_indent
  end

  def type
    @type
  end
}

parser MirahParser {
  digits x=_ : a = oneOf(x) b=("_" c=oneOf(x) {c})*
                               d={[a] + b} { join(d) };
  rlistOf r=_: h=apply(r) t=(comma apply(r))* { [h] + t };
  listOf e=_: rlistOf(e)
              | empty                                               { ArrayList.new } ;

  ws: (oneOf(" \t\f\r\v") | "\\" nl | comment)*;
  comment: "#" (~"\n" _)*;
  start: ! prog=compstmt . end heredoc -> ^(Script prog);
  compstmt: terms* a=(s=statement terms+ {s})*
            b=statement?
            {addToBlock(a, b)};

  bodystmt: b=compstmt r=Rescue? e=Else? f=Ensure? {
    node = b
    if r != nil
      node = build_node('Rescue', [b, r, e], _start, _pos)
    elsif e != nil
      # Warning?
      node = addToBlock(b, e)
    end
    unless f.nil?
      end_pos = Ast(f).end_position
      node ||= @nil
      node = build_node('Ensure', [node, f], _start, _pos)
    end
    node || @nil
  };

  term: . (";" | nl);
  terms: . (";" | nl) (. ";")*;

  nl: "\n" heredoc;

  statement: f=statement2 b= ->^(PH) t=( k(:if) c=value(expr) -> ^(If c b nil)
                                       | k(:unless) c=value(expr) -> ^(If c nil b)
                                       | k(:while) c=value(expr) -> ^(WhileMod c b)
                                       | k(:until) c=value(expr) -> ^(UntilMod c b)
                                       | k(:rescue) r=statement -> ^(Rescue b [^(RescueClause [] nil r)] nil)
                                       )* {tangle(f, t)};
  statement2: l=lhs ."=" r=command_call assign(l, r)
            | l=var_lhs ."&&=" opt_nl r=command_call
              b=assign(l, r)
              -> ^(If gettable2(l) b null)
            | l=var_lhs ."||=" opt_nl r=command_call
              b=assign(l, r)
              -> ^(If gettable2(l) null b)
            | l=var_lhs op=op_assign r=command_call
              b= -> ^(Call op gettable2(l) [r])
              assign(l, b)
            | t=value(primary) ."[" opt_nl a=call_args? opt_nl ."]" op=op_assign v=command_call
              -> ^(OpElemAssign t op a v)
            | t=value(primary) dot f=identifier op=op_assign v=command_call
              -> ^(OpAssign t f op v)
            | t=value(primary) colons ~constant f=identifier op=op_assign v=command_call
              -> ^(OpAssign t f op v)
            | expr;

  value v=_ : {checkExpression(v)};

  expr: h=( k(:not) opt_nl e=expr -> ^(Not e)
            | c=variable ."?" opt_nl t=arg opt_nl . ":" opt_nl e=arg -> ^(If c t e)
            | command_call
            | ."!" e=command_call -> ^(Not e)
            | arg
          ) a={["PH"]} tail=( k(:and) opt_nl b=expr -> ^(And a b)
                            | k(:or) opt_nl b=expr -> ^(Or a b))* {tangle(h, tail)};

  # Node:command - fcall/call/yield/super [!null]
  command: op=operation a=command_args b=cmd_brace_block?-> ^(FCall op a b)
         | t=value(primary) dot_or_colon op=operation2 a=command_args b=cmd_brace_block?-> ^(Call op t a b)
         | k(:super) a=command_args -> ^(Super a)
         | k(:yield) a=command_args -> ^(Yield a);

  # Node:command - call with or without block on end [!null]
  command_call: block_command
              | command
              | k(:return) a=call_args -> ^(Return a+);
              # | k(:break) a=call_args -> ^(Break a+)
              # | k(:next) a=call_args -> ^(Next a+)

  # Node:block_command - A call with a block (foo.bar {...}, foo::bar {...}, bar {...}) [!null]
  block_command: h=block_call t=(dot_or_colon op=operation2 a=command_args
                                 -> ^(Call op ["PH"] a))* {tangle(h, t)};

  primary scope(@BEG, @cond)
         : h=value(primary2) t=->^(PH) tail=( colons b=constant ~(paren_args|call_args|assignment_op) -> ^(Colon2Const t b)
                                            | dot op=operation2 a=opt_paren_args iter=brace_block? -> ^(Call op t a iter)
                                            | colons op=operation2 a=paren_args iter=brace_block? -> ^(Call op t a iter)
                                            | colons op=operation3 ~assignment_op iter=brace_block? -> ^(Call op t iter)
                                            | dot_or_colon a=paren_args iter=brace_block? -> ^(Call "call" t a iter)
                                            | ."[" opt_nl a=call_args? opt_nl ."]" iter=brace_block? ~assignment_op -> ^(Call "[]" t a iter)
                                            )* {tangle(h, tail)};
  primary2
         : k(:super) a=paren_args iter=brace_block? -> ^(Super a iter)
         | k(:super) iter=brace_block -> ^(Super [] iter)
         | k(:super) -> ^(ZSuper)
         | op=operation a=paren_args iter=brace_block? -> ^(FCall op a iter)
         | op=operation iter=brace_block -> ^(FCall op [] iter)| colon3 c=constant ~assignment_op -> ^(Colon3 c)
         | k(:begin)! b=bodystmt k(:end) -> ^(Begin b)
         | . "(" opt_nl e=expr opt_nl . ")" { e }
         | . "(" opt_nl e=compstmt opt_nl . ")" {
           unless e.nil?
             ae = Ast(e)
             ae.start_position = pos(_start)
             ae.end_position = pos(_pos)
           end
           e
         }
         | isBEG . "[" opt_nl . "]" -> ^(ZArray)
         | isBEG . "[" opt_nl a=args trailer opt_nl . "]" -> ^(Array a+)
         | . "{" opt_nl . "}" -> ^(Hash)
         | . "{" opt_nl a=listOf(:assoc) trailer opt_nl . "}" -> ^(Hash a+)
         | k(:yield) . "(" opt_nl . ")" -> ^(Yield)
         | k(:yield) . "(" opt_nl a=call_args opt_nl . ")" -> ^(Yield a+)
         | k(:yield) -> ^(Yield)
         | ."!" ."(" opt_nl .")" -> ^(Call "!" ^(Nil))
         | ."!" ."(" opt_nl e=value(expr) opt_nl .")" -> ^(Call "!" e)
         | isBEG2 k(:if)! opt_nl cond=value(expr) Then body=compstmt tail=if_tail k(:end)
           -> ^(If cond body tail)
         | isBEG2 k(:unless)! opt_nl cond=value(expr) Then body=compstmt tail=Else? k(:end)
           -> ^(If cond tail body)
         | isBEG2 k(:while)! opt_nl COND cond=value(expr) Do body=compstmt k(:end) {body ||= @nil}
           -> ^(While cond body)
         | isBEG2 k(:until)! opt_nl COND cond=value(expr) Do body=compstmt k(:end) {body ||= @nil}
           -> ^(Until cond body)
         # | k(:case)! val=(value(expr))? terms? body=case_body k(:end)
         #   -> ^(Case val body)
         # TODO is this too restrictive?
         | k(:for)! opt_nl var=variable k(:in) opt_nl COND list=value(expr) Do body=compstmt k(:end)
           -> ^(For var body list)
         | k(:class) . "<<"! BEG e=expr  # Should this just allow k(:self)?
           term b=compstmt k(:end) {b ||= @nil}
           -> ^(SClass e b)
         | k(:class)! n=cpath s=superclass
           b=compstmt  # JRuby has bodystmt, but that doesn't make much
                       # sense for mirah. Maybe rescuing exceptions
                       # in the static initializer?
           k(:end) {b ||= @nil}
           -> ^(Class n b s)
         # | module
         | Def k(:self)! . dot_or_colon name=fname args=f_arglist body=bodystmt k(:end)
           -> ^(DefStatic name args body)
         | Def! name=fname args=f_arglist body=bodystmt k(:end)
           -> ^(Def name args body)

         # | k(:lambda) lambda

         | k(:break) -> ^(Break)
         | k(:next) -> ^(Next)
         | k(:redo) -> ^(Redo)
         | k(:retry) -> ^(Retry)
         | k(:return) -> ^(Return ^(Nil))
         | literal
         | memo(:string)
         | regexp
         | variable;

  f_arglist: ."("! opt_nl a=f_args opt_nl .")" BEG {a}
           | a=f_args term {a};

  comma: ."," opt_nl;
  f_args: req=f_arg! opt=(."," f_optarg)? rest=(."," f_rest_arg)? req2=(."," f_arg)? block=(."," f_block_arg)?
            -> ^(Arguments req opt rest req2 block)
        | opt=f_optarg! rest=(."," f_rest_arg)? req=(."," f_arg)? block=(."," f_block_arg)?
            -> ^(Arguments nil opt rest req block)
        | rest=f_rest_arg! req=(."," f_arg)? block=(."," f_block_arg)?
            -> ^(Arguments nil nil rest req block)
        | block=f_block_arg -> ^(Arguments nil nil nil nil block)
        | -> ^(Arguments nil nil nil nil nil);

  f_bad_arg: &constant !"formal argument not a constant" ?{false}
           | &ivar !"formal argument not an instance variable" ?{false}
           | &cvar !"formal argument not a class variable" ?{false};

  f_norm_arg: f_bad_arg
            | l=label BEG t=value(primary) n={List(l).get(1)} { [n, t] }
            | n=identifier { [n, nil] };

  f_arg_item: ~f_opt n=f_norm_arg -> ^(RequiredArgument n+);
            # | ."(" f_margs .")"

  f_arg: rlistOf(:f_arg_item);

  f_opt: n=f_norm_arg ."="! v=arg_value l={ n + [v] }-> ^(OptArg l+);
  f_optarg: rlistOf(:f_opt);

  f_rest_arg: ."*" n=f_norm_arg -> ^(RestArg n+)
            | ."*" -> ^(UnnamedRestArg);

  f_block_arg: ."&" n=f_norm_arg ."=" !"nil" k(:nil) -> ^(OptBlockArg n+)
             | ."&"! n=f_norm_arg -> ^(BlockArg n+);

  block_arg: ."&" v=arg_value -> ^(BlockPass v);

  # :brace_block - [!null]
  cmd_brace_block: brace_block;
  brace_block: ."{" opt_nl p=block_param? b=compstmt opt_nl ."}" -> ^(Iter p b)
             | do_block("");

  # The argument is a hack to skip memoizing this rule.
  do_block _ : ~?{@cond} k(:do) opt_nl p=block_param? b=compstmt k(:end) -> ^(Iter p b);

  # Do we need bv_decls?
  block_param: ."|" opt_nl a=f_args opt_nl ."|" BEG {a};
  block_call: c=command b=do_block h={n=Ast(Ast(c).clone); n.add(b);n} t=(dot_or_colon op=operation2 a=opt_paren_args -> ^(Call op ["PH"] a))* {tangle(h, t)};

  paren_args: ."("! opt_nl c=call_args? opt_nl .")" {c.nil? ? Object(ArrayList.new) : c};
  opt_paren_args: paren_args | ~(call_args | assignment_op) { nil };

  maybe_rescue: a=arg k(:rescue) b=value(arg)
                -> ^(Rescue a [^(RescueClause [] nil b)] nil)
              | arg;

  assign lhs=_ rhs=_ : { n=Ast(Ast(lhs).clone); n.add(rhs); n };

  arg: h=arg0 tail=(."?" opt_nl t=arg opt_nl .":" opt_nl e=arg
                    -> ^(If ["PH"] t e))* {tangle(h, tail)};
  arg0
     : l=lhs ."=" r=maybe_rescue assign(l, r)
     | l=var_lhs ."&&=" opt_nl r=arg
       b=assign(l, r)
       -> ^(If gettable2(l) b null)
     | l=var_lhs ."||=" opt_nl r=arg
       b=assign(l, r)
       -> ^(If gettable2(l) null b)
     | l=var_lhs op=assignment_op r=arg
       b= -> ^(Call op gettable2(l) [r])
       assign(l, b)
     | t=value(primary) ."[" opt_nl a=call_args? opt_nl ."]" op=assignment_op v=arg
       -> ^(OpElemAssign t op a v)
     | value(primary) colons constant assignment_op arg
       !"constant re-assignment prohibited" ?{false}
     | t=value(primary) dot_or_colon f=identifier op=assignment_op v=arg
       -> ^(OpAssign t f op v)
     | colon3 constant assignment_op arg
       !"constant re-assignment prohibited" ?{false}
     # ranges?
     | arg2;

  arg2: a=arg3 t=(."||" opt_nl b=arg2 -> ^(Or ["PH"] b))* {tangle(a, t)};
  arg3: a=arg4 t=(."&&" opt_nl b=arg3 -> ^(And ["PH"] b))* {tangle(a, t)};
  arg4: a=arg5 t=(. op=("<=>"|">="|">"|"<="|"<"|"==="|"=="|"!="|"=~") opt_nl b=arg4
                   -> ^(Call op ["PH"] [b])
                 |."!~" opt_nl b=arg4 -> ^(Not ^(Call "=~" ["PH"] [b])))* {tangle(a, t)};
  arg5: a=arg6 t=(."|" opt_nl b=arg5 -> ^(Call "|" ["PH"] [b])
                 |."^" opt_nl b=arg5 -> ^(Call "^" ["PH"] [b]))* {tangle(a, t)};
  arg6: a=arg7 t=(."&" opt_nl b=arg6 -> ^(Call "&" ["PH"] [b]))* {tangle(a, t)};
  arg7: a=arg8 t=(. op=("<<<"|"<<"|">>") opt_nl b=arg7 -> ^(Call op a [b]))* {tangle(a, t)};
  arg8: a=arg9 t=(."+" opt_nl b=arg8 -> ^(Call "+" ["PH"] [b])
                 |."-" opt_nl b=arg8 -> ^(Call "-" ["PH"] [b]))* {tangle(a, t)};
  arg9: a=arg10 t=(. op=oneOf("*/%") opt_nl b=arg9 -> ^(Call op ["PH"] [b]))* {tangle(a, t)};
  arg10: uminus v=arg11 ?{Ast(v).name.equals('Fixnum')} -> ^(Fixnum negateFixnum(v))
       | uminus v=arg11 ?{Ast(v).name.equals('Float')} -> ^(Float negateFloat(v))
       | uminus v=arg11 -> ^(Call "-@" v)
       | arg11;
  arg11: a=arg12 ."**" opt_nl b=arg11 -> ^(Call "**" a [b])
       | arg12;
  arg12: . op=oneOf("!~") opt_nl v=arg12 -> ^(Call op v)
       | uplus v=arg12 -> ^(Call "+@" v)
       | value(primary);

  arg_value: a=arg {checkExpression(a)};

  trailer: . ("," | nl)?;
  operation: fid | constant | identifier;
  operation2: fid | constant | identifier | op;
  operation3: fid | ~constant identifier | op;
  dot: opt_nl ."." ~"." opt_nl;
  colons: "::" opt_nl;
  dot_or_colon: dot | colons;
  opt_nl: (. nl)*;

  # This marks the beginning of an expression. It must be used inside
  # a rule with scope(@BEG).
  BEG: {@BEG = _pos;nil};
  isBEG: isBEG_("");  # Hack to skip memoizing this rule
  isBEG_ _: isBEG2_("") | oneOf(" \t\f\r\v");
  isBEG2: isBEG2_("");  # Hack to skip memoizing this rule
  isBEG2_ _: ?{_pos == @BEG}
           | ?{Integer.valueOf(0).equals(col())}
           | ?{@begchars.indexOf(_rpeek) > 0};
  COND: {@cond = true;nil};
  UNCOND: {@cond = false;nil};

  colon3: isBEG . "::" opt_nl;
  uminus: isBEG2 . "-"  opt_nl;
  uplus: isBEG2 . "+" opt_nl;

  splat: ."*" v=arg_value s= -> ^(Splat v) { [s] };
  args: l=rlistOf(:arg_value) (comma s=splat {l+s} | { l })
      | splat;

  call_assocs scope(@BEG): l=rlistOf(:assoc) -> ^(Hash l+);
  call_args: c=command { [c] }
           | a=args h=(comma call_assocs)? b=(comma! block_arg)? l={ a }
             ( ?{h} l={ a + [h] } )?
             ( ?{b} l={ l + [b] } )?
             { l }
           | h=call_assocs b=(comma! block_arg)? l={ [h] }
             ( ?{b} l={l+[b]} )?
             { l }
           | b=block_arg { [b] };
  command_args scope(@cond): ~(."(") COND call_args;

  op_assign: . op=("<<="|"<<<="|"-="|"%="|"||="|"|="|"+="|"/="|"**="
                  |"*="|"&&="|"&="|"^="|">>=") opt_nl {"#{String(op).substring(0, String(op).length - 1)}"};
  assignment_op: op_assign | ."=" ~oneOf("~=>") opt_nl {"="};

  lhs: t=value(primary) ."[" opt_nl k=call_args? opt_nl ."]" -> ^(AttrAssign "[]=" t k)
     | t=value(primary) dot_or_colon n=constant -> ^(ConstAssign ^(Colon2Const t n))
     | colon3 n=constant -> ^(ConstAssign ^(Colon3 n))
     | t=value(primary) dot_or_colon n=identifier l={ArrayList.new} -> ^(AttrAssign "#{n}=" t l)
     | var_lhs;
  var_lhs: n=cvar -> ^(ClassVarAssign n)
         | n=ivar -> ^(InstVarAssign n)
         | n=constant -> ^(ConstAssign n)
         | n=identifier -> ^(LocalAssign n);

  assoc: a=arg_value . "=>" opt_nl b=arg_value -> ^(Assoc a b)
       | l=label BEG v=arg_value -> ^(Assoc l v);

  label: . n=identifier2 ":" ~":" opt_nl -> ^(Symbol n);

  literal: numeric | symbol;

  numeric: floatLiteral | fixnum;

  constant: . &upperCase ~reswords ~label h=upperCase t=identifierChar* {"#{h}#{join(t)}"};
  identifier: . &identifierStart ~reswords ~label identifier2;
  identifier2: . h=identifierStart t=identifierChar* l={[h]+t} {join(l)};
  cvar: . "@@" n=identifierChar+ {join(n)};
  ivar: . "@" n=identifierChar+ {join(n)};
  fid: . t=identifierChar+ p=oneOf("?!") ~"=" {"#{join(t)}#{p}"};
  fname: . n=identifierChar+ t=( b=oneOf("!?") ~"=" {b}
                               | "=" ~(oneOf("~>=")|"\n>") {"="}
                               | {""})
           {"#{join(n)}#{t}"}
       | op;

  op: . ( "<=>" | "===" | "==" | "=~" | "!~" | "<=" | ">=" | "<<<"
        | "<<" | ">>" | "!=" | "**" | "[]=" | "[]" | "+@" | "-@"
        | oneOf("&|^<>+-*/%!~")
        );

  cname: c=constant -> ^(Constant c)
       | &identifier !"class/module name must be CONSTANT" ?{false};

  # JRuby allows primary_value in cpath. Do we want that?
  cpath: colon3 n=cname -> ^(Colon3 n)
       | a=(n=cname colons {n})* b=cname
         (?{List(a).size == 0} {b} |
          names={a+[b]}-> ^(Colon2 names+));

  superclass: term {nil}
            | ."<" c=cpath term  # Should this be expr_value instead of cpath?
              {c};

  variable: k(:nil)                                   -> ^(Nil)
          | k(:self)                                  -> ^(Self)
          | k(:true)                                  -> ^(True)
          | k(:false)                                 -> ^(False)
          | v=cvar                                    -> ^(ClassVar v)
          | v=ivar                                    -> ^(InstVar v)
          | n=fid                                     -> ^(FCall n)
          | c=constant                                -> ^(Constant c)
          | n=identifier                              -> ^(Identifier n);

  symbol: . ":" ~":" v=("@@" | "@" | {""}) n=identifierChar+ -> ^(Symbol join(concat([v], n)));

  string: character
        | strings=string1+ {stringConcat(strings)};

  string1: . "'"! s=squote_contents* "'" -> ^(String join(s))
         | . "\"\"" -> ^(String "")
         | . "\"" s=dquote_contents "\"" {s}
         | . "\""! c=(dquote_contents | str_ev)* "\"" -> ^(DString c+)
         | . "<<" x=heredoc_id n= -> ^(Heredoc x) { @heredocs.addLast(HeredocContext.new(n)); n }
         ;

  regexp: isBEG2 ."/" c=(regexp_contents | str_ev)* "/" options=letter*
          -> ^(Regex c join(options));

  str_ev: "\#@@"! n=identifierChar+ -> ^(EvString ^(ClassVar join(n)))
        | "\#@"! n=identifierChar+ -> ^(EvString ^(InstVar join(n)))
        | "\#{"! c=compstmt "}" -> ^(EvString c);

  heredoc_id: "-"? ( "\""! identifierChar+ "\""
                   | "'"! identifierChar+ "'"
                   | identifierChar+
                   ) {text(_start, _pos)};

  squote_contents: "\\\\" { "\\" } | "\\'" { "'" } | ~"'" _;
  dquote_contents: c=(escape | ~("\#{" | "\#@" | "\"")_)+ -> ^(String join(c));
  regexp_contents: c=(re_escape | ~("\#{" | "\#@" | "/")_)+ -> ^(String join(c));

  squote_heredoc id=_ : s=(~heredoc_marker(id) _)* heredoc_marker(id) {join(s)};
  dquote_heredoc id=_ : n=( str_ev
                          | s=(~(heredoc_marker(id) | "\#{" | "\#@") _)+
                            -> ^(String join(s))
                          )* heredoc_marker(id) {n};

  heredoc_marker c=_ : ?{"\n".equals(text(_pos - 1, _pos))}
                       ( ?{HeredocContext(c).no_indent}
                       | oneOf(" \t\f\r\v")*
                       ) {_str(HeredocContext(c).id)} "\n";

  character: . "?" e=escape -> ^(Character getCodePoint(e))
           | . "?" ~oneOf(" \t\f\r\v\n") c=codepoint -> ^(Character getCodePoint(c));

  escape: unicode_escape
        | "\\"! ("n" {"\n"}
                |"s" {"\s"}
                |"r" {"\r"}
                |"t" {"\t"}
                |"v" {"\v"}
                |"f" {"\f"}
                |"b" {"\b"}
                |"a" {"\a"}
                |"e" {"\e"}
                |"\n" {""}
                |codepoint
                );

  unicode_escape: "\\" ( "\n" {""}
                       | "\\" {"\\"}
                       | a=oneOf(@OCTAL) b=oneOf(@OCTAL) c=oneOf(@OCTAL)
                         {String.new(Character.toChars(Integer.parseInt("#{a}#{b}#{c}", 8)))}
                       |"x"! a=oneOf(@HEX) b=oneOf(@HEX)
                         {String.new(Character.toChars(Integer.parseInt("#{a}#{b}", 16)))}
                       |"u"! c1=oneOf(@HEX) c2=oneOf(@HEX) c3=oneOf(@HEX) c4=oneOf(@HEX)
                         {String.new(Character.toChars(Integer.parseInt("#{c1}#{c2}#{c3}#{c4}", 16)))}
                       |"U"! c1=oneOf(@HEX) c2=oneOf(@HEX) c3=oneOf(@HEX) c4=oneOf(@HEX)
                             c5=oneOf(@HEX) c6=oneOf(@HEX) c7=oneOf(@HEX) c8=oneOf(@HEX)
                         {String.new(Character.toChars(Integer.parseInt("#{c1}#{c2}#{c3}#{c4}#{c5}#{c6}#{c7}#{c8}", 16)))}
                       );

  re_escape: unicode_escape
           | "\\"! c=codepoint {"\\#{c}"};

  Then: . term? k(:then) | . term;
  Ensure: k(:ensure)! compstmt;
  Else: k(:else)! compstmt;
  Do: (k(:do) | . term) UNCOND;
  Def: k(:def) ~oneOf("?!");

  if_tail: Else
         | k("elsif")! opt_nl cond=value(expr) Then body=compstmt tail=if_tail
           -> ^(If cond body tail)
         | {nil};

  Rescue: (k("rescue")! c=listOf(:constant) (. "=>" opt_nl . n=identifier)?
           Then b=compstmt -> ^(RescueClause c n b))+;

  fixnum: . n=( "0"! ( oneOf("xX") d=digits(@HEX)+ { parseInt(join(d), 16) }
                  | oneOf("dD") d=digits(@DECIMAL)+ { parseInt(join(d), 10) }
                  | oneOf("oO") d=digits(@OCTAL)+ { parseInt(join(d), 8) }
                  | oneOf("bB") d=digits(@BINARY)+ { parseInt(join(d), 2) }
                  | d=digits(@OCTAL)* { parseInt("0" + join(d), 8) }
                  )
            | d=digits(@DECIMAL)+ { parseInt(join(d), 10) }
            ) -> ^(Fixnum n);

  floatLiteral: . f=(i=digits(@DECIMAL)+
                     f=("." digits(@DECIMAL)+ | { [] })
                     e=(oneOf("eE") digits(@DECIMAL)+ | { [] })
                     ?{List(f).size() + List(e).size() > 0}
                     s={i+["."]+f+["E0"]+e}
                     { Double.new(join(s)) }
                    ) -> ^(Float f);

  # Left recursion clears memoization of some values, but heredocs
  # can only be processed once. This rule forces memoization.
  memo rule=_ : position = {Integer.valueOf(_pos)}
                ( {@memo.get(position) || @error}
                | v=apply(rule) { @memo.put(position, v); v });

  reswords: ?{_rpeek.indexOf(".") == -1}
          ( k(:__LINE__)|k(:__FILE__)|k(:__ENCODING__)|k(:BEGIN)|k(:END)|k(:alias)
          | k(:and)|k(:begin)|k(:break)|k(:case)|k(:class)|k(:def)|k(:defined)|k(:do)
          | k(:else)|k(:elsif)|k(:end)|k(:ensure)|k(:false)|k(:for)|k(:in)|k(:module)
          | k(:next)|k(:nil)|k(:not)|k(:or)|k(:redo)|k(:rescue)|k(:retry)|k(:return)
          | k(:self)|k(:super)|k(:then)|k(:true)|k(:undef)|k(:when)|k(:yield)|k(:if)
          | k(:unless)|k(:while)|k(:until)
          );

  def self.parse_args(args:String[]) {
    argc = args.length
    if args[0].equals "-v"
      BaseParser.tracing = true
      argc -= 1
    elsif args[0].equals "--tree"
      BaseParser.debug_parse_true = true
      argc -= 1
    end
    if argc > 0
      filename = args[args.length - 1]
      stream = InputStream(FileInputStream.new(filename))
    else
      stream = System.in
    end
    reader = BufferedReader.new(InputStreamReader.new(stream))
    buffer = char[8192]
    builder = StringBuilder.new
    while (read = reader.read(buffer, 0, buffer.length)) > 0
      builder.append(buffer, 0, read);
    end
    return builder.toString
  }

  def self.main(args:String[]) {
      returns void
      parser = MirahParser.new
      code = parse_args(args)
      begin
        result = parser.parse(code)
        puts BaseParser.print_r(result) unless BaseParser.debug_parse_tree
      ensure
        unless BaseParser.debug_parse_tree
          mb = 1024 * 1024
          runtime = Runtime.getRuntime
          puts "##### Heap utilization statistics [MB] #####"
          puts "Used Memory: #{(runtime.totalMemory - runtime.freeMemory) / mb}"
          puts "Total Memory: #{runtime.totalMemory / mb}"
          puts "Free Memory: #{runtime.freeMemory / mb}"
          puts "Max Memory: #{runtime.maxMemory / mb}"
        end
      end
  }

  def initialize {
    @error = BaseParser.__ERROR__
    @BEG = 0
    @begchars = " ([{,;=" #}
    @HEX = "0123456789abcdefABCDEF"
    @DECIMAL = "0123456789"
    @OCTAL = "01234567"
    @BINARY = "01"
    @heredocs = LinkedList.new
    @memo = {}
    @nil = Ast.new('Nil')
    @nil.start_position = @nil.end_position = Position.new(0, 0, 0)
    @lhs_map = {
      "ConstAssign" => "Constant",
      "LocalAssign" => "Local",
      "InstVarAssign" => "InstVar",
      "ClassVarAssign" => "ClassVar",
    }
  }

  def oneOf() {
    chars = String(_pop)
    _char(chars)
  }

  def _codepoint() {
    t = _any
    return -1 if t == @error
    character = Character(t).charValue
    if character >= 0xd800 && character <= 0xdbff
      t = _any
      if t == @error
        return -1
      end
      return Character.toCodePoint(character, Character(t).charValue)
    else
      return int(character)
    end
  }

  def codepoint {
    start = _pos
    t = _codepoint
    if t == -1
      self._pos = start
      return Object(@error)
    else
      return Object(String.new(Character.toChars(t)))
    end
  }

  def identifierChar() {
    start = _pos
    c = _codepoint
    if c == 95 || Character.isLetterOrDigit(c)
      Object(String.new(Character.toChars(c)))
    else
      self._pos = start
      @error
    end
  }

  def identifierStart {
    start = _pos
    c = _codepoint
    if c == 95 || Character.isLetter(c)
      Object(String.new(Character.toChars(c)))
    else
      self._pos = start
      @error
    end
  }

  def upperCase {
    start = _pos
    c = _codepoint
    if Character.isUpperCase(c)
      Object(String.new(Character.toChars(c)))
    else
      self._pos = start
      @error
    end
  }

  def heredoc {
    # Note: This won't parse if we backtrack over the newline and not
    # the heredoc identifier. However the nl rule should be memoized
    # so we should be safe.

    # Set up a new list so nested heredocs match properly.
    heredocs = @heredocs
    @heredocs = LinkedList.new

    while heredocs.size > 0
      context = HeredocContext(heredocs.removeFirst)
      _push(context)
      node = context.node
      node.children.clear
      _t = if context.type == '"'
        dquote_heredoc
      else
        squote_heredoc
      end
      if _t == @error
        raise SyntaxError.new("Missing heredoc terminator #{context.id}.", _pos, _string, _list)
      elsif _t.kind_of?(String)
        node.name = 'String'
        node.add(_t)
      else
        l = List(_t)
        if l.size == 0
          node.name = 'String'
          node.add("")
        elsif l.size == 1 && Ast(l.get(0)).name.equals('String')
          node.name = 'String'
          node.addAll(Ast(l.get(0)).children)
        else
          node.name = 'DString'
          node.addAll(l)
        end
      end
    end
    "\n"
  }

  # Give a better error message than the default
  # k keyword=_   : . str(keyword) ~identifierChar {keyword};
  def k {
    keyword = String(_any)
    start = _pos
    ws
    t = _str(keyword)
    if t != @error
      t = @error unless identifierChar == @error
    end
    if t == @error
      @error.last = keyword
      self._pos = start
    end
    t
  }

  def parseInt(string:string, radix:int) {
    Integer.valueOf(Integer.parseInt(string, radix))
  }

  def stringConcat(strings:Object) {
    result = nil
    List(strings).each do |s|
      result = stringConcat(result, s)
    end
    return result
  }

  def stringConcat(a:Object, b:Object) {
    la = Ast(a)
    lb = Ast(b)
    return la if lb.nil?
    return lb if la.nil?
    result = Ast.new("DString")
    [la, lb].each do |n|
      node = Ast(n)
      if node.name.equals("DString")
        result.addAll(node.children)
      else
        result.add(node)
      end
    end
    result.start_position = la.start_position
    result.end_position = lb.end_position
    result
  }

  def getCodePoint(c:Object) {
    String(c).codePointAt(0)
  }

  def obj2ast(x:Object) {
    if x.kind_of?(Ast)
      Ast(x)
    elsif x.kind_of?(List)
      l = List(x)
      if l.size == 0
        Ast(nil)
      elsif l.size == 1
        obj2ast(l.get(0))
      else
        ast = Ast.new('Body', l)
        first = obj2ast(l.get(0))
        last = obj2ast(l.get(l.size - 1))
        ast.start_position = first.start_position
        ast.end_position = last.end_position
        ast
      end
    elsif x.nil?
      Ast(nil)
    else
      raise "Expected Ast, got #{x} (#{x.getClass})"
    end
  }

  def addToBlock(a:Object, b:Object) {
    x = obj2ast(a)
    y = obj2ast(b)
    if x.nil?
      return y
    elsif y.nil?
      return x
    end
    x_kids = 'Body'.equals(x.name) ? x.children : [x]
    y_kids = 'Body'.equals(y.name) ? y.children : [y]
    body = Ast.new('Body', x_kids)
    body.addAll(y_kids)
    body.start_position = x.start_position
    body.end_position = y.end_position
    body
  }

  def checkExpression(e:Object) {
    # TODO actually check
    e || @nil
  }

  def gettable2(e:Object) {
    n = Ast(e)
    n2 = Ast(n.clone)
    n2.name = String(@lhs_map.get(n.name))
    n2
  }

  def negateFixnum(f:Object) {
    n = Integer(Ast(f).get(1)).intValue
    Integer.valueOf(-n)
  }

  def negateFloat(f:Object) {
    d = Double(Ast(f).get(1)).doubleValue
    Double.valueOf(-d)
  }

  def tangle(head:Object, tail:Object) {
    ph = ArrayList.new
    ph.add("PH")
    result = head
    List(tail).each do |item|
      inner = result
      outer = List(item)
      index = -1
      while index == -1
        index = outer.indexOf(ph)
        outer = List(outer.get(1)) if index == -1
      end
      outer.set(index, inner)
      result = item
    end
    result
  }
}